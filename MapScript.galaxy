//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Nexus Wars
// Author: lilman
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/NativeLib"

//--------------------------------------------------------------------------------------------------
// Library: 1
//--------------------------------------------------------------------------------------------------
// Function Declarations
void lib2_gf_UnitAbilityRemoveChargeUsed (unit lp_inUnit, string lp_inAbil, string lp_inCharge);

// Functions
void lib2_gf_UnitAbilityRemoveChargeUsed (unit lp_inUnit, string lp_inAbil, string lp_inCharge) {
    // Implementation
    UnitAbilityAddChargeUsed(lp_inUnit, lp_inAbil, lp_inCharge, (-1.0 * 1.0));
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib2_InitLib_completed = false;

void lib2_InitLib () {
    if (lib2_InitLib_completed) {
        return;
    }

    lib2_InitLib_completed = true;
}

//--------------------------------------------------------------------------------------------------
// Library: Add Experience To Unit
//--------------------------------------------------------------------------------------------------
// Function Declarations
void lib1_gf_AddExperienceToUnit (int lp_experiencePoints, unit lp_unit);

// Functions
void lib1_gf_AddExperienceToUnit (int lp_experiencePoints, unit lp_unit) {
    int auto9042F9CC_n;
    int auto9042F9CC_i;
    int autoC1504A00_n;
    int autoC1504A00_i;
    int auto870808E1_n;
    int auto870808E1_i;
    int auto61451D9C_n;
    int auto61451D9C_i;
    int auto707857A7_n;
    int auto707857A7_i;
    int autoC777CC48_n;
    int autoC777CC48_i;
    int auto5477FCE3_n;
    int auto5477FCE3_i;
    int auto2FA96ABC_n;
    int auto2FA96ABC_i;
    int autoA6CC9140_n;
    int autoA6CC9140_i;
    int auto48C1F84F_n;
    int auto48C1F84F_i;
    int autoFE6D553A_n;
    int autoFE6D553A_i;
    int auto5B5FDE8C_n;
    int auto5B5FDE8C_i;
    int autoE8BA0832_n;
    int autoE8BA0832_i;
    int autoFCAB51F9_n;
    int autoFCAB51F9_i;
    int auto8D174095_n;
    int auto8D174095_i;

    // Variable Declarations
    int lv_numberOfBits;
    int lv_numberOfHundreds;
    int lv_numberOfTenThousands;
    int lv_numberOfTens;
    int lv_numberOfThousands;

    // Variable Initialization
    lv_numberOfBits = 0;
    lv_numberOfHundreds = 0;
    lv_numberOfTenThousands = 0;
    lv_numberOfTens = 0;
    lv_numberOfThousands = 0;

    // Implementation
    if ((lp_experiencePoints < 10)) {
        auto8D174095_n = lp_experiencePoints;
        auto8D174095_i = 1;
        while (auto8D174095_i <= auto8D174095_n) {
            UnitCreateEffectUnit(lp_unit, "AddExp1point", lp_unit);
            auto8D174095_i = auto8D174095_i + 1;
        }
    }
    else {
        if ((lp_experiencePoints < 100)) {
            lv_numberOfTens = (lp_experiencePoints / 10);
            autoE8BA0832_n = lv_numberOfTens;
            autoE8BA0832_i = 1;
            while (autoE8BA0832_i <= autoE8BA0832_n) {
                UnitCreateEffectUnit(lp_unit, "AddExp10points", lp_unit);
                autoE8BA0832_i = autoE8BA0832_i + 1;
            }
            lv_numberOfBits = (lp_experiencePoints - (lv_numberOfTens * 10));
            autoFCAB51F9_n = lv_numberOfBits;
            autoFCAB51F9_i = 1;
            while (autoFCAB51F9_i <= autoFCAB51F9_n) {
                UnitCreateEffectUnit(lp_unit, "AddExp1point", lp_unit);
                autoFCAB51F9_i = autoFCAB51F9_i + 1;
            }
        }
        else {
            if ((lp_experiencePoints < 1000)) {
                lv_numberOfHundreds = (lp_experiencePoints / 100);
                auto48C1F84F_n = lv_numberOfHundreds;
                auto48C1F84F_i = 1;
                while (auto48C1F84F_i <= auto48C1F84F_n) {
                    UnitCreateEffectUnit(lp_unit, "AddExp100points", lp_unit);
                    auto48C1F84F_i = auto48C1F84F_i + 1;
                }
                lv_numberOfTens = ((lp_experiencePoints - (lv_numberOfHundreds * 100)) / 10);
                autoFE6D553A_n = lv_numberOfTens;
                autoFE6D553A_i = 1;
                while (autoFE6D553A_i <= autoFE6D553A_n) {
                    UnitCreateEffectUnit(lp_unit, "AddExp10points", lp_unit);
                    autoFE6D553A_i = autoFE6D553A_i + 1;
                }
                lv_numberOfBits = (lp_experiencePoints - ((lv_numberOfHundreds * 100) + (lv_numberOfTens * 10)));
                auto5B5FDE8C_n = lv_numberOfBits;
                auto5B5FDE8C_i = 1;
                while (auto5B5FDE8C_i <= auto5B5FDE8C_n) {
                    UnitCreateEffectUnit(lp_unit, "AddExp1point", lp_unit);
                    auto5B5FDE8C_i = auto5B5FDE8C_i + 1;
                }
            }
            else {
                if ((lp_experiencePoints < 10000)) {
                    lv_numberOfThousands = (lp_experiencePoints / 1000);
                    autoC777CC48_n = lv_numberOfThousands;
                    autoC777CC48_i = 1;
                    while (autoC777CC48_i <= autoC777CC48_n) {
                        UnitCreateEffectUnit(lp_unit, "AddExp1000points", lp_unit);
                        autoC777CC48_i = autoC777CC48_i + 1;
                    }
                    lv_numberOfHundreds = ((lp_experiencePoints - (lv_numberOfThousands * 1000)) / 100);
                    auto5477FCE3_n = lv_numberOfHundreds;
                    auto5477FCE3_i = 1;
                    while (auto5477FCE3_i <= auto5477FCE3_n) {
                        UnitCreateEffectUnit(lp_unit, "AddExp100points", lp_unit);
                        auto5477FCE3_i = auto5477FCE3_i + 1;
                    }
                    lv_numberOfTens = ((lp_experiencePoints - ((lv_numberOfThousands * 1000) + (lv_numberOfHundreds * 100))) / 10);
                    auto2FA96ABC_n = lv_numberOfTens;
                    auto2FA96ABC_i = 1;
                    while (auto2FA96ABC_i <= auto2FA96ABC_n) {
                        UnitCreateEffectUnit(lp_unit, "AddExp10points", lp_unit);
                        auto2FA96ABC_i = auto2FA96ABC_i + 1;
                    }
                    lv_numberOfBits = (lp_experiencePoints - ((lv_numberOfThousands * 1000) + ((lv_numberOfHundreds * 100) + (lv_numberOfTens * 10))));
                    autoA6CC9140_n = lv_numberOfBits;
                    autoA6CC9140_i = 1;
                    while (autoA6CC9140_i <= autoA6CC9140_n) {
                        UnitCreateEffectUnit(lp_unit, "AddExp1point", lp_unit);
                        autoA6CC9140_i = autoA6CC9140_i + 1;
                    }
                }
                else {
                    if ((lp_experiencePoints < 100000)) {
                        lv_numberOfTenThousands = (lp_experiencePoints / 10000);
                        auto9042F9CC_n = lv_numberOfTenThousands;
                        auto9042F9CC_i = 1;
                        while (auto9042F9CC_i <= auto9042F9CC_n) {
                            UnitCreateEffectUnit(lp_unit, "AddExp10000points", lp_unit);
                            auto9042F9CC_i = auto9042F9CC_i + 1;
                        }
                        lv_numberOfThousands = ((lp_experiencePoints - (lv_numberOfTenThousands * 10000)) / 1000);
                        autoC1504A00_n = lv_numberOfThousands;
                        autoC1504A00_i = 1;
                        while (autoC1504A00_i <= autoC1504A00_n) {
                            UnitCreateEffectUnit(lp_unit, "AddExp1000points", lp_unit);
                            autoC1504A00_i = autoC1504A00_i + 1;
                        }
                        lv_numberOfHundreds = ((lp_experiencePoints - ((lv_numberOfTenThousands * 10000) + (lv_numberOfThousands * 1000))) / 100);
                        auto870808E1_n = lv_numberOfHundreds;
                        auto870808E1_i = 1;
                        while (auto870808E1_i <= auto870808E1_n) {
                            UnitCreateEffectUnit(lp_unit, "AddExp100points", lp_unit);
                            auto870808E1_i = auto870808E1_i + 1;
                        }
                        lv_numberOfTens = ((lp_experiencePoints - (((lv_numberOfTenThousands * 10000) + (lv_numberOfThousands * 1000)) + (lv_numberOfHundreds * 100))) / 10);
                        auto61451D9C_n = lv_numberOfTens;
                        auto61451D9C_i = 1;
                        while (auto61451D9C_i <= auto61451D9C_n) {
                            UnitCreateEffectUnit(lp_unit, "AddExp10points", lp_unit);
                            auto61451D9C_i = auto61451D9C_i + 1;
                        }
                        lv_numberOfBits = (lp_experiencePoints - (((lv_numberOfTenThousands * 10000) + (lv_numberOfThousands * 1000)) + ((lv_numberOfHundreds * 100) + (lv_numberOfTens * 10))));
                        auto707857A7_n = lv_numberOfBits;
                        auto707857A7_i = 1;
                        while (auto707857A7_i <= auto707857A7_n) {
                            UnitCreateEffectUnit(lp_unit, "AddExp1point", lp_unit);
                            auto707857A7_i = auto707857A7_i + 1;
                        }
                    }
                    else {
                    }
                }
            }
        }
    }
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib1_InitLib_completed = false;

void lib1_InitLib () {
    if (lib1_InitLib_completed) {
        return;
    }

    lib1_InitLib_completed = true;
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libNtve_InitLib();
    lib2_InitLib();
    lib1_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int gv_smiley1;
int gv_smiley2;
unitgroup gv_smiley1group;
unitgroup gv_smiley2group;
int[11] gv_protossIncome;
int[11] gv_incomeZealot;
int[11] gv_incomeStalker;
int[11] gv_incomeSentry;
int[11] gv_incomeDarkTemplar;
int[11] gv_incomeImmortal;
int[11] gv_incomeArchon;
int[11] gv_incomeCollossus;
int[11] gv_incomePhoenix;
int[11] gv_incomeVoidray;
int[11] gv_incomeCarrier;
int[11] gv_incomeHighTemplar;
int[11] gv_incomeScout;
unitgroup[11] gv_gateway;
unitgroup[11] gv_cyberneticCore;
unitgroup[11] gv_forge;
unitgroup[11] gv_darkShrine;
unitgroup[11] gv_roboticFacility;
unitgroup[11] gv_templarArchive;
unitgroup[11] gv_roboticBay;
unitgroup[11] gv_stargate;
unitgroup[11] gv_twilightCouncil;
unitgroup[11] gv_fleetBeacon;
unitgroup[11] gv_assimilator;
unitgroup[11] gv_obelisk;
int[11] gv_terranIncome;
int[11] gv_incomeMarine;
int[11] gv_incomeReaper;
int[11] gv_incomeMaraudor;
int[11] gv_incomeGhosts;
int[11] gv_incomeMedivac;
int[11] gv_incomeTank;
int[11] gv_incomeThor;
int[11] gv_incomeHellion;
int[11] gv_incomeBanshee;
int[11] gv_incomeBattlecruiser;
int[11] gv_incomeViking;
int[11] gv_incomeFirebat;
int[11] gv_incomeRaven;
unitgroup[11] gv_barrack;
unitgroup[11] gv_engineeringBay;
unitgroup[11] gv_bunker;
unitgroup[11] gv_ghostAcademy;
unitgroup[11] gv_starport;
unitgroup[11] gv_supplyDepot;
unitgroup[11] gv_armory;
unitgroup[11] gv_factory;
unitgroup[11] gv_sensor;
unitgroup[11] gv_fusion;
unitgroup[11] gv_missileTurret;
unitgroup[11] gv_refinery;
unitgroup[11] gv_psidisrupter;
int[11] gv_zergIncome;
int[11] gv_incomeZergling;
int[11] gv_incomeBaneling;
int[11] gv_incomeQueen;
int[11] gv_incomeRoach;
int[11] gv_incomeHydra;
int[11] gv_incomeUltra;
int[11] gv_incomeMuta;
int[11] gv_incomeCorruptor;
int[11] gv_incomeBroodlord;
int[11] gv_incomeInfestor;
int[11] gv_incomeLurker;
unitgroup[11] gv_spawningPool;
unitgroup[11] gv_banelingNest;
unitgroup[11] gv_spineCrawler;
unitgroup[11] gv_roachWarren;
unitgroup[11] gv_hydraliskDen;
unitgroup[11] gv_ultraliskCavern;
unitgroup[11] gv_spire;
unitgroup[11] gv_sporeCrawler;
unitgroup[11] gv_greaterSpire;
unitgroup[11] gv_nydus;
unitgroup[11] gv_lurkerDen;
int[11] gv_pylonIncome;
int[11] gv_incomePylon;
int[11] gv_incomePylon2;
int[11] gv_incomePylon3;
int[11] gv_incomePylon4;
int[11] gv_incomePylon5;
int[11] gv_zerglingbounty;
int[11] gv_banelingbounty2;
unitgroup gv_allUnits;
int gv_allUnits2;
playergroup gv_allPlayers;
playergroup gv_team1;
playergroup gv_team12;
playergroup gv_team2;
playergroup gv_team22;
int[11] gv_totalIncome;
fixed[11] gv_totalIncome2;
int gv_totalIncomeTeam1;
int gv_totalIncomeTeam2;
unitgroup[11] gv_pylon1;
unitgroup[11] gv_pylon2;
unitgroup[11] gv_pylon3;
unitgroup[11] gv_pylon4;
unitgroup[11] gv_pylon5;
unitgroup[11] gv_sCV;
unitgroup[11] gv_playerUnits;
int[11] gv_playerUnits2;
bool gv_nexus1Dead;
bool gv_nexus2Dead;
bool[11] gv_player;
unit[11] gv_smiley;
int gv_minutes;
int gv_seconds;
int gv_time;
int gv_time2;
text[11] gv_playerName;
int gv_rowOffsetfortheme;
int gv_currentnoofplayers;
int gv_mainDialogwindow;
int gv_mainDialogwindow2;
int[11] gv_playerskills;
int[11] gv_labelkills;
int[11] gv_labelIncome;
int gv_labelTeam1Income;
int gv_labelTeam2Income;
int gv_labelTeam1kills;
int gv_labelTeam2kills;
bool gv_showHide;
int gv_showHideButton;
int gv_timer;
int gv_timer3;
int gv_timer2;
int gv_team1kills;
int gv_team2kills;
bool gv_gameover;
int gv_stat;
int[11] gv_drawVote;
int gv_drawRequire;
int gv_drawTimer;
int gv_acceptPlayer;
bank[11] gv_banks;
int[11] gv_wins;
int[11] gv_loss;
bool gv_validGame;
int[11] gv_nukeIndicator;

void InitGlobals () {
    int init_i;

    gv_smiley1 = 0;
    gv_smiley2 = 0;
    gv_smiley1group = UnitGroupEmpty();
    gv_smiley2group = UnitGroupEmpty();
    init_i = 0;
    while (init_i <= 10) {
        gv_protossIncome[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_incomeZealot[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_incomeStalker[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_incomeSentry[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_incomeDarkTemplar[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_incomeImmortal[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_incomeArchon[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_incomeCollossus[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_incomePhoenix[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_incomeVoidray[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_incomeCarrier[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_incomeHighTemplar[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_incomeScout[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_gateway[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_cyberneticCore[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_forge[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_darkShrine[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_roboticFacility[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_templarArchive[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_roboticBay[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_stargate[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_twilightCouncil[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_fleetBeacon[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_assimilator[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_obelisk[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_terranIncome[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_incomeMarine[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_incomeReaper[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_incomeMaraudor[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_incomeGhosts[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_incomeMedivac[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_incomeTank[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_incomeThor[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_incomeHellion[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_incomeBanshee[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_incomeBattlecruiser[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_incomeViking[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_incomeFirebat[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_incomeRaven[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_barrack[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_engineeringBay[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_bunker[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_ghostAcademy[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_starport[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_supplyDepot[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_armory[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_factory[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_sensor[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_fusion[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_missileTurret[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_refinery[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_psidisrupter[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_zergIncome[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_incomeZergling[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_incomeBaneling[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_incomeQueen[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_incomeRoach[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_incomeHydra[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_incomeUltra[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_incomeMuta[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_incomeCorruptor[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_incomeBroodlord[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_incomeInfestor[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_incomeLurker[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_spawningPool[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_banelingNest[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_spineCrawler[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_roachWarren[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_hydraliskDen[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_ultraliskCavern[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_spire[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_sporeCrawler[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_greaterSpire[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_nydus[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_lurkerDen[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_pylonIncome[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_incomePylon[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_incomePylon2[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_incomePylon3[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_incomePylon4[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_incomePylon5[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_zerglingbounty[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_banelingbounty2[init_i] = 0;
        init_i = init_i + 1;
    }
    gv_allUnits = UnitGroupEmpty();
    gv_allUnits2 = 0;
    gv_allPlayers = PlayerGroupEmpty();
    gv_team1 = PlayerGroupEmpty();
    gv_team12 = PlayerGroupEmpty();
    gv_team2 = PlayerGroupEmpty();
    gv_team22 = PlayerGroupEmpty();
    init_i = 0;
    while (init_i <= 10) {
        gv_totalIncome[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_totalIncome2[init_i] = 0.0;
        init_i = init_i + 1;
    }
    gv_totalIncomeTeam1 = 0;
    gv_totalIncomeTeam2 = 0;
    init_i = 0;
    while (init_i <= 10) {
        gv_pylon1[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_pylon2[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_pylon3[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_pylon4[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_pylon5[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_sCV[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_playerUnits[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_playerUnits2[init_i] = 0;
        init_i = init_i + 1;
    }
    gv_nexus1Dead = false;
    gv_nexus2Dead = false;
    init_i = 0;
    while (init_i <= 10) {
        gv_player[init_i] = false;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_smiley[init_i] = null;
        init_i = init_i + 1;
    }
    gv_minutes = 0;
    gv_seconds = 0;
    gv_time = c_invalidDialogId;
    gv_time2 = c_invalidDialogControlId;
    init_i = 0;
    while (init_i <= 10) {
        gv_playerName[init_i] = null;
        init_i = init_i + 1;
    }
    gv_rowOffsetfortheme = 0;
    gv_currentnoofplayers = 0;
    gv_mainDialogwindow = c_invalidDialogId;
    gv_mainDialogwindow2 = c_invalidDialogId;
    init_i = 0;
    while (init_i <= 10) {
        gv_playerskills[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_labelkills[init_i] = c_invalidDialogControlId;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        gv_labelIncome[init_i] = c_invalidDialogControlId;
        init_i = init_i + 1;
    }
    gv_labelTeam1Income = c_invalidDialogControlId;
    gv_labelTeam2Income = c_invalidDialogControlId;
    gv_labelTeam1kills = c_invalidDialogControlId;
    gv_labelTeam2kills = c_invalidDialogControlId;
    gv_showHide = true;
    gv_showHideButton = c_invalidDialogControlId;
    gv_timer = c_invalidDialogControlId;
    gv_timer3 = c_invalidDialogControlId;
    gv_timer2 = 0;
    gv_team1kills = 0;
    gv_team2kills = 0;
    gv_gameover = false;
    gv_stat = c_invalidDialogId;

    init_i = 0;
    while(init_i <= 10) {
        gv_wins[init_i] = 0;
        gv_loss[init_i] = 0;
        gv_nukeIndicator[init_i] = 0;
        init_i = init_i + 1;
    }
    gv_validGame = false;
}

void GameVictory(int player) {
    if(gv_validGame) {
        BankValueSetFromInt(gv_banks[player], "record", "wins", gv_wins[player] + 1);
    }
    BankSave(gv_banks[player]);
    GameOver(player, c_gameOverVictory, true, true);
}

void GameDefeat(int player) {
    if(gv_validGame) {
        BankValueSetFromInt(gv_banks[player], "record", "loss", gv_loss[player] + 1);
    }
    BankSave(gv_banks[player]);
    GameOver(player, c_gameOverDefeat, true, true);
}

void GameTie(int player) {
    BankSave(gv_banks[player]);
    GameOver(player, c_gameOverTie, true, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Maraudor;
trigger gt_Marine;
trigger gt_pylon;
trigger gt_cannon;
trigger gt_Infested1;
trigger gt_Infested2;
trigger gt_Sentry;
trigger gt_VoidRay;
trigger gt_Raven;
trigger gt_Banshee;
trigger gt_Ghostclaok;
trigger gt_stalker;
trigger gt_hellion;
trigger gt_Carrier;
trigger gt_Cannon60;
trigger gt_Cannon90;
trigger gt_UnitQueue;
trigger gt_UnitQueue2;
trigger gt_UnitQueue3;
trigger gt_AI;
trigger gt_Region1stuck;
trigger gt_Region2stuck;
trigger gt_Region3stuck;
trigger gt_Region4stuck;
trigger gt_Region5;
trigger gt_Region6;
trigger gt_Region7;
trigger gt_Region8;
trigger gt_Team1Teleport;
trigger gt_Team2Teleport;
trigger gt_AntiCagingTeam1;
trigger gt_AntiCagingTeam2;
trigger gt_Team1CompBottom2;
trigger gt_Team1CompTop;
trigger gt_Team1CompBottom2Stuck;
trigger gt_Team1CompTopStuck;
trigger gt_Team2CompBottom2;
trigger gt_Team2CompTop;
trigger gt_Team2CompBottom2Stuck;
trigger gt_Team2CompTopStuck;
trigger gt_compscvbuild;
trigger gt_Kills;
trigger gt_ShowHideLBButton;
trigger gt_LeaderboardIntialization;
trigger gt_LeaderboardIntialization2;
trigger gt_TimerUpdate;
trigger gt_TimerSet;
trigger gt_TimerUpdate2;
trigger gt_TimerSet2;
trigger gt_button;
trigger gt_FogofWar;
trigger gt_MapInitialization;
trigger gt_Runtriggers;
trigger gt_SCVcreate2;
trigger gt_Food60;
trigger gt_Food90;
trigger gt_SCVcommandable;
trigger gt_Time;
trigger gt_TimeUpdate;
trigger gt_Team1Win;
trigger gt_Team2Win;
trigger gt_EndGame2;
trigger gt_EndGame3;
trigger gt_Leave;
trigger gt_Leave2;
trigger gt_LeaverSupply;
trigger gt_LeaverSupply2;
trigger gt_LeaverSupply3;
trigger gt_LeaverSupply4;
trigger gt_Leaverunits;
trigger gt_Zerglingbountyvariable;
trigger gt_AddingtoIncomeTerran;
trigger gt_AddingtoIncomeZerg;
trigger gt_AddingtoIncomeProtoss;
trigger gt_AddingtoIncomeTerran2;
trigger gt_AddingtoIncomeZerg2;
trigger gt_AddingtoIncomeProtoss2;
trigger gt_AddingtoIncomeleaver;
trigger gt_AddingPylon;
trigger gt_AddingPylon2;
trigger gt_Pylonupgrading1;
trigger gt_Pylonupgrading2;
trigger gt_Pylonupgrading3;
trigger gt_Pylonupgrading4;
trigger gt_Income;
trigger gt_IncomeUpdate;
trigger gt_IncomeUpdate2;
trigger gt_IncomeMapinit;
trigger gt_Team1Income;
trigger gt_Team2Income;
trigger gt_Team1Kills;
trigger gt_Team2Kills;
trigger gt_Level;
trigger gt_GameCommand;
trigger gt_PlayerLeavePunish;
trigger gt_Nuke;

void gt_DrawSuccess() {
    gv_gameover = true;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/D070E181"));
    Wait(2.0, c_timeGame);
    PlayerGroupLoopBegin(gv_team1);
    while (!PlayerGroupLoopDone()) {
        if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            if(gv_seconds < 3600) {
                GameTie(PlayerGroupLoopCurrent());
            }
            else {
                GameVictory(PlayerGroupLoopCurrent());
            }
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(gv_team2);
    while (!PlayerGroupLoopDone()) {
        if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            if(gv_seconds < 3600) {
                GameTie(PlayerGroupLoopCurrent());
            }
            else {
                GameVictory(PlayerGroupLoopCurrent());
            }
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
}

void gt_DrawFail() {
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/D070E178") + StringToText("(") + IntToText(gv_acceptPlayer) + StringToText("/") + IntToText(gv_drawRequire) + StringToText(")"));
}

void gt_DrawResult() {
    if(gv_acceptPlayer >= gv_drawRequire) {
        gt_DrawSuccess();
    }
    else {
        gt_DrawFail();
    }
}

//--------------------------------------------------------------------------------------------------
// Trigger: Maraudor
//--------------------------------------------------------------------------------------------------
bool gt_Maraudor_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Marauder"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), Order(AbilityCommand("StimpackMarauder", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Maraudor_Init () {
    gt_Maraudor = TriggerCreate("gt_Maraudor_Func");
    TriggerAddEventUnitStartedAttack(gt_Maraudor, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Marine
//--------------------------------------------------------------------------------------------------
bool gt_Marine_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Marine"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), Order(AbilityCommand("Stimpack", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Marine_Init () {
    gt_Marine = TriggerCreate("gt_Marine_Func");
    TriggerAddEventUnitStartedAttack(gt_Marine, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: pylon
//--------------------------------------------------------------------------------------------------
bool gt_pylon_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Pylon") || (UnitGetType(EventUnit()) == "Pylon2") || (UnitGetType(EventUnit()) == "Pylon3") || (UnitGetType(EventUnit()) == "Pylon4") || (UnitGetType(EventUnit()) == "Pylon5")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitGetOwner(UnitGroupLoopCurrent()) == UnitGetOwner(EventUnit()))) {
            libNtve_gf_UnitAbilityRemoveChargeUsed(UnitGroupLoopCurrent(), AbilityCommandGetAbility(AbilityCommand("TerranBuild", 7)), "Abil/TerranBuild");
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_pylon_Init () {
    gt_pylon = TriggerCreate("gt_pylon_Func");
    TriggerAddEventUnitDied(gt_pylon, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: cannon
//--------------------------------------------------------------------------------------------------
bool gt_cannon_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "PhotonCannon") || (UnitGetType(EventUnit()) == "PhotonCannon2")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitGetOwner(UnitGroupLoopCurrent()) == UnitGetOwner(EventUnit()))) {
            lib2_gf_UnitAbilityRemoveChargeUsed(UnitGroupLoopCurrent(), AbilityCommandGetAbility(AbilityCommand("ProtossBuild", 7)), "Abil/ProtossBuild");
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_cannon_Init () {
    gt_cannon = TriggerCreate("gt_cannon_Func");
    TriggerAddEventUnitDied(gt_cannon, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infested 1
//--------------------------------------------------------------------------------------------------
bool gt_Infested1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "InfestorTerran"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_team1, EventPlayer())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitUncommandable(EventUnit(), true);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(148)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Infested1_Init () {
    gt_Infested1 = TriggerCreate("gt_Infested1_Func");
    TriggerAddEventUnitRegion(gt_Infested1, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infested 2
//--------------------------------------------------------------------------------------------------
bool gt_Infested2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "InfestorTerran"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_team2, EventPlayer())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitUncommandable(EventUnit(), true);
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(149)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Infested2_Init () {
    gt_Infested2 = TriggerCreate("gt_Infested2_Func");
    TriggerAddEventUnitRegion(gt_Infested2, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sentry
//--------------------------------------------------------------------------------------------------
bool gt_Sentry_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Sentry"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), Order(AbilityCommand("GuardianShield", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Sentry_Init () {
    gt_Sentry = TriggerCreate("gt_Sentry_Func");
    TriggerAddEventUnitStartedAttack(gt_Sentry, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: VoidRay
//--------------------------------------------------------------------------------------------------
bool gt_VoidRay_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "VoidRay"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), Order(AbilityCommand("VoidRaySwarmDamageBoost", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoidRay_Init () {
    gt_VoidRay = TriggerCreate("gt_VoidRay_Func");
    TriggerAddEventUnitStartedAttack(gt_VoidRay, null);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Raven
//--------------------------------------------------------------------------------------------------
bool gt_Raven_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Raven"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("PlacePointDefenseDrone", 0), UnitGetPosition(EventUnit())), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Raven_Init () {
    gt_Raven = TriggerCreate("gt_Raven_Func");
    TriggerAddEventUnitStartedAttack(gt_Raven, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Banshee
//--------------------------------------------------------------------------------------------------
bool gt_Banshee_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Banshee"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), Order(AbilityCommand("BansheeCloak", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Banshee_Init () {
    gt_Banshee = TriggerCreate("gt_Banshee_Func");
    TriggerAddEventUnitAttacked(gt_Banshee, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ghost claok
//--------------------------------------------------------------------------------------------------
bool gt_Ghostclaok_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Ghost"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), Order(AbilityCommand("GhostCloak", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Ghostclaok_Init () {
    gt_Ghostclaok = TriggerCreate("gt_Ghostclaok_Func");
    TriggerAddEventUnitAttacked(gt_Ghostclaok, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: stalker
//--------------------------------------------------------------------------------------------------
bool gt_stalker_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Stalker"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_team12, 1)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_team12, 2)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_team12, 3)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_team12, 4)))) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("Blink", 0), PointWithOffset(UnitGetPosition(EventUnit()), -7.0, 0.0)), c_orderQueueReplace);
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(148)), c_orderQueueReplace);
    }
    else {
        if (((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_team22, 1)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_team22, 2)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_team22, 3)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_team22, 4)))) {
            UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("Blink", 0), PointWithOffset(UnitGetPosition(EventUnit()), 7.0, 0.0)), c_orderQueueReplace);
            UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(149)), c_orderQueueReplace);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_stalker_Init () {
    gt_stalker = TriggerCreate("gt_stalker_Func");
    TriggerAddEventUnitAttacked(gt_stalker, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: hellion
//--------------------------------------------------------------------------------------------------
bool gt_hellion_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Hellion"))) {
            return false;
        }

        if (!((libNtve_gf_UnitCanAttackUnit(EventUnitTarget(), EventUnit()) == true))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "ImmuneToFriendlySplash") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_team12, 1)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_team12, 2)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_team12, 3)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_team12, 4)))) {
        UnitBehaviorAdd(EventUnit(), "ImmuneToFriendlySplash", UnitFromId(146), 1);
        Wait(0.5, c_timeGame);
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(UnitGetPosition(EventUnit()), -10.0, 0.0)), c_orderQueueReplace);
        Wait(2.1, c_timeGame);
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(148)), c_orderQueueReplace);
        Wait(6.0, c_timeGame);
        UnitBehaviorRemove(EventUnit(), "ImmuneToFriendlySplash", 1);
    }
    else {
        if (((UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_team22, 1)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_team22, 2)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_team22, 3)) || (UnitGetOwner(EventUnit()) == PlayerGroupPlayer(gv_team22, 4)))) {
            UnitBehaviorAdd(EventUnit(), "ImmuneToFriendlySplash", UnitFromId(147), 1);
            Wait(0.5, c_timeGame);
            UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffset(UnitGetPosition(EventUnit()), 10.0, 0.0)), c_orderQueueReplace);
            Wait(2.1, c_timeGame);
            UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(149)), c_orderQueueReplace);
            Wait(6.0, c_timeGame);
            UnitBehaviorRemove(EventUnit(), "ImmuneToFriendlySplash", 1);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_hellion_Init () {
    gt_hellion = TriggerCreate("gt_hellion_Func");
    TriggerAddEventUnitStartedAttack(gt_hellion, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Carrier
//--------------------------------------------------------------------------------------------------
bool gt_Carrier_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Carrier"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitMagazineArm(UnitLastCreated(), AbilityCommand("CarrierHangar", 0), 4);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Carrier_Init () {
    gt_Carrier = TriggerCreate("gt_Carrier_Func");
    TriggerAddEventUnitCreated(gt_Carrier, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cannon 60
//--------------------------------------------------------------------------------------------------
bool gt_Cannon60_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    unitgroup[11] lv_cannon;
    int[11] lv_numbercannon;
    unitgroup[11] lv_cannon2;
    int[11] lv_numbercannon2;
    unitgroup[11] lv_cannon3;
    int[11] lv_numbercannon3;
    int[11] lv_totalcannon;

    // Variable Initialization
    init_i = 0;
    while (init_i <= 10) {
        lv_cannon[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        lv_numbercannon[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        lv_cannon2[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        lv_numbercannon2[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        lv_cannon3[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        lv_numbercannon3[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        lv_totalcannon[init_i] = 0;
        init_i = init_i + 1;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(PlayerGroupActive());
    while (!PlayerGroupLoopDone()) {
        lv_numbercannon[PlayerGroupLoopCurrent()] = 0;
        lv_numbercannon2[PlayerGroupLoopCurrent()] = 0;
        lv_numbercannon3[PlayerGroupLoopCurrent()] = 0;
        UnitGroupLoopBegin(UnitGroup("PhotonCannon", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            UnitGroupAdd(lv_cannon[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
            lv_numbercannon[PlayerGroupLoopCurrent()] = UnitGroupCount(lv_cannon[PlayerGroupLoopCurrent()], c_unitCountAlive);
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitGroup("PhotonCannon2", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            UnitGroupAdd(lv_cannon2[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
            lv_numbercannon2[PlayerGroupLoopCurrent()] = UnitGroupCount(lv_cannon2[PlayerGroupLoopCurrent()], c_unitCountAlive);
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitGroup("HiveMindEmulator", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            UnitGroupAdd(lv_cannon3[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
            lv_numbercannon3[PlayerGroupLoopCurrent()] = UnitGroupCount(lv_cannon3[PlayerGroupLoopCurrent()], c_unitCountAlive);
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        lv_totalcannon[PlayerGroupLoopCurrent()] = ((lv_numbercannon[PlayerGroupLoopCurrent()] + lv_numbercannon2[PlayerGroupLoopCurrent()]) + (lv_numbercannon3[PlayerGroupLoopCurrent()] + 0));
        if ((lv_totalcannon[PlayerGroupLoopCurrent()] == 1)) {
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropTerrazine, c_playerPropOperSetTo, 0);
        }
        else {
        }
        if ((lv_totalcannon[PlayerGroupLoopCurrent()] == 0)) {
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropTerrazine, c_playerPropOperSetTo, 1);
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Cannon60_Init () {
    gt_Cannon60 = TriggerCreate("gt_Cannon60_Func");
    TriggerEnable(gt_Cannon60, false);
    TriggerAddEventTimePeriodic(gt_Cannon60, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cannon 90
//--------------------------------------------------------------------------------------------------
bool gt_Cannon90_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    unitgroup[11] lv_cannon;
    int[11] lv_numbercannon;
    unitgroup[11] lv_cannon2;
    int[11] lv_numbercannon2;
    unitgroup[11] lv_cannon3;
    int[11] lv_numbercannon3;
    int[11] lv_totalcannon;

    // Variable Initialization
    init_i = 0;
    while (init_i <= 10) {
        lv_cannon[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        lv_numbercannon[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        lv_cannon2[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        lv_numbercannon2[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        lv_cannon3[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        lv_numbercannon3[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 10) {
        lv_totalcannon[init_i] = 0;
        init_i = init_i + 1;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(PlayerGroupActive());
    while (!PlayerGroupLoopDone()) {
        lv_numbercannon[PlayerGroupLoopCurrent()] = 0;
        lv_numbercannon2[PlayerGroupLoopCurrent()] = 0;
        lv_numbercannon3[PlayerGroupLoopCurrent()] = 0;
        UnitGroupLoopBegin(UnitGroup("PhotonCannon", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            UnitGroupAdd(lv_cannon[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
            lv_numbercannon[PlayerGroupLoopCurrent()] = UnitGroupCount(lv_cannon[PlayerGroupLoopCurrent()], c_unitCountAlive);
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitGroup("PhotonCannon2", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            UnitGroupAdd(lv_cannon2[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
            lv_numbercannon2[PlayerGroupLoopCurrent()] = UnitGroupCount(lv_cannon2[PlayerGroupLoopCurrent()], c_unitCountAlive);
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitGroup("HiveMindEmulator", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            UnitGroupAdd(lv_cannon3[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
            lv_numbercannon3[PlayerGroupLoopCurrent()] = UnitGroupCount(lv_cannon3[PlayerGroupLoopCurrent()], c_unitCountAlive);
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        lv_totalcannon[PlayerGroupLoopCurrent()] = ((lv_numbercannon[PlayerGroupLoopCurrent()] + lv_numbercannon2[PlayerGroupLoopCurrent()]) + (lv_numbercannon3[PlayerGroupLoopCurrent()] + 0));
        if ((lv_totalcannon[PlayerGroupLoopCurrent()] == 2)) {
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropTerrazine, c_playerPropOperSetTo, 0);
        }
        else {
        }
        if ((lv_totalcannon[PlayerGroupLoopCurrent()] == 1)) {
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropTerrazine, c_playerPropOperSetTo, 1);
        }
        else {
        }
        if ((lv_totalcannon[PlayerGroupLoopCurrent()] == 0)) {
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropTerrazine, c_playerPropOperSetTo, 2);
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Cannon90_Init () {
    gt_Cannon90 = TriggerCreate("gt_Cannon90_Func");
    TriggerEnable(gt_Cannon90, false);
    TriggerAddEventTimePeriodic(gt_Cannon90, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Queue
//--------------------------------------------------------------------------------------------------
bool gt_UnitQueue_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "Barracks")) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("BarracksTrain", 0)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnit()) == "EngineeringBay")) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("BarracksTrain", 1)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnit()) == "Bunker")) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("BarracksTrain", 3)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnit()) == "GhostAcademy")) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("BarracksTrain", 2)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnit()) == "Starport")) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("StarportTrain", 0)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnit()) == "SupplyDepot")) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("FactoryTrain", 1)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnit()) == "Armory")) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("FactoryTrain", 4)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnit()) == "Factory")) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("FactoryTrain", 5)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnit()) == "SensorTower")) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("StarportTrain", 1)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnit()) == "FusionCore")) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("StarportTrain", 3)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnit()) == "MissileTurret")) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("StarportTrain", 4)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnit()) == "SpawningPool") && (UnitQueueItemCount(EventUnit(), 1) == 0)) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("ZergTrain", 0)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnit()) == "BanelingNest") && (UnitQueueItemCount(EventUnit(), 1) == 0)) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("ZergTrain", 2)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnit()) == "SpineCrawler")) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("ZergTrain", 4)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnit()) == "RoachWarren")) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("ZergTrain", 1)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnit()) == "HydraliskDen")) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("LarvaTrain", 3)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnit()) == "UltraliskCavern")) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("LarvaTrain", 6)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnit()) == "Spire")) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("LarvaTrain", 4)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnit()) == "SporeCrawler")) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("LarvaTrain", 11)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnit()) == "Spire2")) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("ZergTrain", 3)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnit()) == "Gateway")) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("GatewayTrain", 0)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnit()) == "CyberneticsCore")) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("GatewayTrain", 1)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnit()) == "Forge")) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("GatewayTrain", 5)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnit()) == "DarkShrine")) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("GatewayTrain", 4)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnit()) == "RoboticsFacility")) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("RoboticsFacilityTrain", 3)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnit()) == "TemplarArchive")) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("ZergTrain", 5)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnit()) == "RoboticsBay")) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("RoboticsFacilityTrain", 2)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnit()) == "Stargate")) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("StargateTrain", 0)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnit()) == "TwilightCouncil")) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("StargateTrain", 4)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnit()) == "FleetBeacon")) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("StargateTrain", 2)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnit()) == "NydusCanal")) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("LarvaTrain", 10)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnit()) == "Assimilator")) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("GatewayTrain", 3)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnit()) == "LurkerDen")) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("ZergTrain", 6)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnit()) == "Refinery")) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("BarracksTrain", 4)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnit()) == "PsiIndoctrinator")) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("StarportTrain", 2)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnit()) == "Obelisk")) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("StargateTrain", 5)), c_orderQueueReplace);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitQueue_Init () {
    gt_UnitQueue = TriggerCreate("gt_UnitQueue_Func");
    TriggerAddEventUnitTrainProgress(gt_UnitQueue, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Queue 2
//--------------------------------------------------------------------------------------------------
bool gt_UnitQueue2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnitProgressUnit()) == "Barracks")) {
        UnitIssueOrder(EventUnitProgressUnit(), Order(AbilityCommand("BarracksTrain", 0)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnitProgressUnit()) == "EngineeringBay")) {
        UnitIssueOrder(EventUnitProgressUnit(), Order(AbilityCommand("BarracksTrain", 1)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnitProgressUnit()) == "Bunker")) {
        UnitIssueOrder(EventUnitProgressUnit(), Order(AbilityCommand("BarracksTrain", 3)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnitProgressUnit()) == "GhostAcademy")) {
        UnitIssueOrder(EventUnitProgressUnit(), Order(AbilityCommand("BarracksTrain", 2)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnitProgressUnit()) == "Starport")) {
        UnitIssueOrder(EventUnitProgressUnit(), Order(AbilityCommand("StarportTrain", 0)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnitProgressUnit()) == "SupplyDepot")) {
        UnitIssueOrder(EventUnitProgressUnit(), Order(AbilityCommand("FactoryTrain", 1)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnitProgressUnit()) == "Armory")) {
        UnitIssueOrder(EventUnitProgressUnit(), Order(AbilityCommand("FactoryTrain", 4)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnitProgressUnit()) == "Factory")) {
        UnitIssueOrder(EventUnitProgressUnit(), Order(AbilityCommand("FactoryTrain", 5)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnitProgressUnit()) == "SensorTower")) {
        UnitIssueOrder(EventUnitProgressUnit(), Order(AbilityCommand("StarportTrain", 1)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnitProgressUnit()) == "FusionCore")) {
        UnitIssueOrder(EventUnitProgressUnit(), Order(AbilityCommand("StarportTrain", 3)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnitProgressUnit()) == "MissileTurret")) {
        UnitIssueOrder(EventUnitProgressUnit(), Order(AbilityCommand("StarportTrain", 4)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnitProgressUnit()) == "SpawningPool")) {
        UnitIssueOrder(EventUnitProgressUnit(), Order(AbilityCommand("ZergTrain", 0)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnitProgressUnit()) == "BanelingNest")) {
        UnitIssueOrder(EventUnitProgressUnit(), Order(AbilityCommand("ZergTrain", 2)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnitProgressUnit()) == "SpineCrawler")) {
        UnitIssueOrder(EventUnitProgressUnit(), Order(AbilityCommand("ZergTrain", 4)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnitProgressUnit()) == "RoachWarren")) {
        UnitIssueOrder(EventUnitProgressUnit(), Order(AbilityCommand("ZergTrain", 1)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnitProgressUnit()) == "HydraliskDen")) {
        UnitIssueOrder(EventUnitProgressUnit(), Order(AbilityCommand("LarvaTrain", 3)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnitProgressUnit()) == "UltraliskCavern")) {
        UnitIssueOrder(EventUnitProgressUnit(), Order(AbilityCommand("LarvaTrain", 6)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnitProgressUnit()) == "Spire")) {
        UnitIssueOrder(EventUnitProgressUnit(), Order(AbilityCommand("LarvaTrain", 4)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnitProgressUnit()) == "SporeCrawler")) {
        UnitIssueOrder(EventUnitProgressUnit(), Order(AbilityCommand("LarvaTrain", 11)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnitProgressUnit()) == "Spire2")) {
        UnitIssueOrder(EventUnitProgressUnit(), Order(AbilityCommand("ZergTrain", 3)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnitProgressUnit()) == "Gateway")) {
        UnitIssueOrder(EventUnitProgressUnit(), Order(AbilityCommand("GatewayTrain", 0)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnitProgressUnit()) == "CyberneticsCore")) {
        UnitIssueOrder(EventUnitProgressUnit(), Order(AbilityCommand("GatewayTrain", 1)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnitProgressUnit()) == "Forge")) {
        UnitIssueOrder(EventUnitProgressUnit(), Order(AbilityCommand("GatewayTrain", 5)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnitProgressUnit()) == "DarkShrine")) {
        UnitIssueOrder(EventUnitProgressUnit(), Order(AbilityCommand("GatewayTrain", 4)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnitProgressUnit()) == "RoboticsFacility")) {
        UnitIssueOrder(EventUnitProgressUnit(), Order(AbilityCommand("RoboticsFacilityTrain", 3)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnitProgressUnit()) == "TemplarArchive")) {
        UnitIssueOrder(EventUnitProgressUnit(), Order(AbilityCommand("ZergTrain", 5)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnitProgressUnit()) == "RoboticsBay")) {
        UnitIssueOrder(EventUnitProgressUnit(), Order(AbilityCommand("RoboticsFacilityTrain", 2)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnitProgressUnit()) == "Stargate")) {
        UnitIssueOrder(EventUnitProgressUnit(), Order(AbilityCommand("StargateTrain", 0)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnitProgressUnit()) == "TwilightCouncil")) {
        UnitIssueOrder(EventUnitProgressUnit(), Order(AbilityCommand("StargateTrain", 4)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnitProgressUnit()) == "FleetBeacon")) {
        UnitIssueOrder(EventUnitProgressUnit(), Order(AbilityCommand("StargateTrain", 2)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnitProgressUnit()) == "NydusCanal")) {
        UnitIssueOrder(EventUnitProgressUnit(), Order(AbilityCommand("LarvaTrain", 10)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnitProgressUnit()) == "Assimilator")) {
        UnitIssueOrder(EventUnitProgressUnit(), Order(AbilityCommand("GatewayTrain", 3)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnitProgressUnit()) == "LurkerDen")) {
        UnitIssueOrder(EventUnitProgressUnit(), Order(AbilityCommand("ZergTrain", 6)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnitProgressUnit()) == "Refinery")) {
        UnitIssueOrder(EventUnitProgressUnit(), Order(AbilityCommand("BarracksTrain", 4)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnitProgressUnit()) == "PsiIndoctrinator")) {
        UnitIssueOrder(EventUnitProgressUnit(), Order(AbilityCommand("StarportTrain", 2)), c_orderQueueReplace);
    }
    else {
    }
    if ((UnitGetType(EventUnitProgressUnit()) == "Obelisk")) {
        UnitIssueOrder(EventUnitProgressUnit(), Order(AbilityCommand("StargateTrain", 5)), c_orderQueueReplace);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitQueue2_Init () {
    gt_UnitQueue2 = TriggerCreate("gt_UnitQueue2_Func");
    TriggerAddEventUnitConstructProgress(gt_UnitQueue2, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Queue 3
//--------------------------------------------------------------------------------------------------
bool gt_UnitQueue3_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("Barracks", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitQueueItemCount(UnitGroupLoopCurrent(), 1) == 0)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("BarracksTrain", 0)), c_orderQueueReplace);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("EngineeringBay", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitQueueItemCount(UnitGroupLoopCurrent(), 1) == 0)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("BarracksTrain", 1)), c_orderQueueReplace);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Bunker", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitQueueItemCount(UnitGroupLoopCurrent(), 1) == 0)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("BarracksTrain", 3)), c_orderQueueReplace);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("GhostAcademy", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitQueueItemCount(UnitGroupLoopCurrent(), 1) == 0)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("BarracksTrain", 2)), c_orderQueueReplace);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Starport", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitQueueItemCount(UnitGroupLoopCurrent(), 1) == 0)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("StarportTrain", 0)), c_orderQueueReplace);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("SupplyDepot", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitQueueItemCount(UnitGroupLoopCurrent(), 1) == 0)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("FactoryTrain", 1)), c_orderQueueReplace);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Armory", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitQueueItemCount(UnitGroupLoopCurrent(), 1) == 0)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("FactoryTrain", 4)), c_orderQueueReplace);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Factory", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitQueueItemCount(UnitGroupLoopCurrent(), 1) == 0)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("FactoryTrain", 5)), c_orderQueueReplace);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("SensorTower", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitQueueItemCount(UnitGroupLoopCurrent(), 1) == 0)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("StarportTrain", 1)), c_orderQueueReplace);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("FusionCore", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitQueueItemCount(UnitGroupLoopCurrent(), 1) == 0)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("StarportTrain", 3)), c_orderQueueReplace);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("MissileTurret", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitQueueItemCount(UnitGroupLoopCurrent(), 1) == 0)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("StarportTrain", 4)), c_orderQueueReplace);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("SpawningPool", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitQueueItemCount(UnitGroupLoopCurrent(), 1) == 0)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("ZergTrain", 0)), c_orderQueueReplace);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("BanelingNest", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitQueueItemCount(UnitGroupLoopCurrent(), 1) == 0)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("ZergTrain", 2)), c_orderQueueReplace);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("SpineCrawler", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitQueueItemCount(UnitGroupLoopCurrent(), 1) == 0)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("ZergTrain", 4)), c_orderQueueReplace);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("RoachWarren", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitQueueItemCount(UnitGroupLoopCurrent(), 1) == 0)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("ZergTrain", 1)), c_orderQueueReplace);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("HydraliskDen", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitQueueItemCount(UnitGroupLoopCurrent(), 1) == 0)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("LarvaTrain", 3)), c_orderQueueReplace);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("UltraliskCavern", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitQueueItemCount(UnitGroupLoopCurrent(), 1) == 0)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("LarvaTrain", 6)), c_orderQueueReplace);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Spire", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitQueueItemCount(UnitGroupLoopCurrent(), 1) == 0)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("LarvaTrain", 4)), c_orderQueueReplace);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("SporeCrawler", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitQueueItemCount(UnitGroupLoopCurrent(), 1) == 0)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("LarvaTrain", 11)), c_orderQueueReplace);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Spire2", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitQueueItemCount(UnitGroupLoopCurrent(), 1) == 0)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("ZergTrain", 3)), c_orderQueueReplace);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Gateway", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitQueueItemCount(UnitGroupLoopCurrent(), 1) == 0)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("GatewayTrain", 0)), c_orderQueueReplace);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("CyberneticsCore", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitQueueItemCount(UnitGroupLoopCurrent(), 1) == 0)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("GatewayTrain", 1)), c_orderQueueReplace);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Forge", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitQueueItemCount(UnitGroupLoopCurrent(), 1) == 0)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("GatewayTrain", 5)), c_orderQueueReplace);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("DarkShrine", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitQueueItemCount(UnitGroupLoopCurrent(), 1) == 0)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("GatewayTrain", 4)), c_orderQueueReplace);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("RoboticsFacility", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitQueueItemCount(UnitGroupLoopCurrent(), 1) == 0)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("RoboticsFacilityTrain", 3)), c_orderQueueReplace);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("TemplarArchive", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitQueueItemCount(UnitGroupLoopCurrent(), 1) == 0)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("ZergTrain", 5)), c_orderQueueReplace);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("RoboticsBay", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitQueueItemCount(UnitGroupLoopCurrent(), 1) == 0)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("RoboticsFacilityTrain", 2)), c_orderQueueReplace);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Stargate", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitQueueItemCount(UnitGroupLoopCurrent(), 1) == 0)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("StargateTrain", 0)), c_orderQueueReplace);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("TwilightCouncil", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitQueueItemCount(UnitGroupLoopCurrent(), 1) == 0)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("StargateTrain", 4)), c_orderQueueReplace);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("FleetBeacon", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitQueueItemCount(UnitGroupLoopCurrent(), 1) == 0)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("StargateTrain", 2)), c_orderQueueReplace);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("NydusCanal", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitQueueItemCount(UnitGroupLoopCurrent(), 1) == 0)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("LarvaTrain", 10)), c_orderQueueReplace);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Assimilator", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitQueueItemCount(UnitGroupLoopCurrent(), 1) == 0)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("GatewayTrain", 3)), c_orderQueueReplace);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("LurkerDen", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitQueueItemCount(UnitGroupLoopCurrent(), 1) == 0)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("ZergTrain", 6)), c_orderQueueReplace);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Refinery", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitQueueItemCount(UnitGroupLoopCurrent(), 1) == 0)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("BarracksTrain", 4)), c_orderQueueReplace);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("PsiIndoctrinator", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitQueueItemCount(UnitGroupLoopCurrent(), 1) == 0)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("StarportTrain", 2)), c_orderQueueReplace);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("Obelisk", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if ((UnitQueueItemCount(UnitGroupLoopCurrent(), 1) == 0)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("StargateTrain", 5)), c_orderQueueReplace);
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitQueue3_Init () {
    gt_UnitQueue3 = TriggerCreate("gt_UnitQueue3_Func");
    TriggerAddEventTimePeriodic(gt_UnitQueue3, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI
//--------------------------------------------------------------------------------------------------
bool gt_AI_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[11] lv_build;

    // Variable Initialization
    init_i = 0;
    while (init_i <= 10) {
        lv_build[init_i] = 0;
        init_i = init_i + 1;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_team12);
    while (!PlayerGroupLoopDone()) {
        AIStart(PlayerGroupLoopCurrent(), true, 300);
        libNtve_gf_DeclareNextTown(PlayerGroupLoopCurrent(), PointFromId(1));
        AISetMainTown(PlayerGroupLoopCurrent(), AIGetClosestTown(PlayerGroupLoopCurrent(), PointFromId(1)));
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(gv_team22);
    while (!PlayerGroupLoopDone()) {
        AIStart(PlayerGroupLoopCurrent(), true, 300);
        libNtve_gf_DeclareNextTown(PlayerGroupLoopCurrent(), PointFromId(20));
        AISetMainTown(PlayerGroupLoopCurrent(), AIGetClosestTown(PlayerGroupLoopCurrent(), PointFromId(20)));
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(PlayerGroupActive());
    while (!PlayerGroupLoopDone()) {
        if ((PlayerType(PlayerGroupLoopCurrent()) == c_playerTypeComputer)) {
            AIClearStock(PlayerGroupLoopCurrent());
            lv_build[PlayerGroupLoopCurrent()] = RandomInt(1, 3);
            if ((lv_build[PlayerGroupLoopCurrent()] == 1)) {
                AISetStock(PlayerGroupLoopCurrent(), 1, "SpawningPool");
                AISetStock(PlayerGroupLoopCurrent(), 2, "Barracks");
                AISetStock(PlayerGroupLoopCurrent(), 3, "RoachWarren");
                AISetStock(PlayerGroupLoopCurrent(), 2, "Forge");
                AISetStock(PlayerGroupLoopCurrent(), 2, "HydraliskDen");
                AISetStock(PlayerGroupLoopCurrent(), 2, "BanelingNest");
                AISetStock(PlayerGroupLoopCurrent(), 6, "Spire");
                AISetStock(PlayerGroupLoopCurrent(), 6, "Spire2");
                AISetStock(PlayerGroupLoopCurrent(), 10, "SporeCrawler");
                AISetStock(PlayerGroupLoopCurrent(), 6, "SpineCrawler");
                AISetStock(PlayerGroupLoopCurrent(), 5, "UltraliskCavern");
            }
            else {
                if ((lv_build[PlayerGroupLoopCurrent()] == 2)) {
                    AISetStock(PlayerGroupLoopCurrent(), 8, "Barracks");
                    AISetStock(PlayerGroupLoopCurrent(), 6, "Bunker");
                    AISetStock(PlayerGroupLoopCurrent(), 2, "Factory");
                    AISetStock(PlayerGroupLoopCurrent(), 4, "Forge");
                    AISetStock(PlayerGroupLoopCurrent(), 6, "MissileTurret");
                    AISetStock(PlayerGroupLoopCurrent(), 15, "Armory");
                }
                else {
                    if ((lv_build[PlayerGroupLoopCurrent()] == 3)) {
                        AISetStock(PlayerGroupLoopCurrent(), 1, "Gateway");
                        AISetStock(PlayerGroupLoopCurrent(), 4, "Forge");
                        AISetStock(PlayerGroupLoopCurrent(), 1, "CyberneticsCore");
                        AISetStock(PlayerGroupLoopCurrent(), 1, "DarkShrine");
                        AISetStock(PlayerGroupLoopCurrent(), 3, "Assimilator");
                        AISetStock(PlayerGroupLoopCurrent(), 4, "RoboticsFacility");
                        AISetStock(PlayerGroupLoopCurrent(), 1, "Stargate");
                        AISetStock(PlayerGroupLoopCurrent(), 20, "TwilightCouncil");
                    }
                    else {
                    }
                }
            }
            AIEnableStock(PlayerGroupLoopCurrent());
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AI_Init () {
    gt_AI = TriggerCreate("gt_AI_Func");
    TriggerAddEventTimeElapsed(gt_AI, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Region1 stuck
//--------------------------------------------------------------------------------------------------
bool gt_Region1stuck_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_team12);
    while (!PlayerGroupLoopDone()) {
        UnitGroupLoopBegin(UnitGroup(null, PlayerGroupLoopCurrent(), RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            if ((UnitGetType(UnitGroupLoopCurrent()) != "SCV") && (UnitHasBehavior(UnitGroupLoopCurrent(), "ImmuneToFriendlySplash") == false)) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(162)), c_orderQueueReplace);
            }
            else {
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(gv_team22);
    while (!PlayerGroupLoopDone()) {
        UnitGroupLoopBegin(UnitGroup(null, PlayerGroupLoopCurrent(), RegionFromId(6), UnitFilter(0, 0, (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            if ((UnitGetType(UnitGroupLoopCurrent()) != "SCV") && (UnitHasBehavior(UnitGroupLoopCurrent(), "ImmuneToFriendlySplash") == false)) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(16)), c_orderQueueReplace);
            }
            else {
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Region1stuck_Init () {
    gt_Region1stuck = TriggerCreate("gt_Region1stuck_Func");
    TriggerAddEventTimePeriodic(gt_Region1stuck, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Region2 stuck
//--------------------------------------------------------------------------------------------------
bool gt_Region2stuck_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_team12);
    while (!PlayerGroupLoopDone()) {
        UnitGroupLoopBegin(UnitGroup(null, PlayerGroupLoopCurrent(), RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            if ((UnitGetType(UnitGroupLoopCurrent()) != "SCV") && (UnitHasBehavior(UnitGroupLoopCurrent(), "ImmuneToFriendlySplash") == false)) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(17)), c_orderQueueReplace);
            }
            else {
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(gv_team22);
    while (!PlayerGroupLoopDone()) {
        UnitGroupLoopBegin(UnitGroup(null, PlayerGroupLoopCurrent(), RegionFromId(7), UnitFilter(0, 0, (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            if ((UnitGetType(UnitGroupLoopCurrent()) != "SCV") && (UnitHasBehavior(UnitGroupLoopCurrent(), "ImmuneToFriendlySplash") == false)) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(161)), c_orderQueueReplace);
            }
            else {
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Region2stuck_Init () {
    gt_Region2stuck = TriggerCreate("gt_Region2stuck_Func");
    TriggerAddEventTimePeriodic(gt_Region2stuck, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Region3 stuck
//--------------------------------------------------------------------------------------------------
bool gt_Region3stuck_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_team12);
    while (!PlayerGroupLoopDone()) {
        UnitGroupLoopBegin(UnitGroup(null, PlayerGroupLoopCurrent(), RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            if ((UnitGetType(UnitGroupLoopCurrent()) != "SCV") && (UnitHasBehavior(UnitGroupLoopCurrent(), "ImmuneToFriendlySplash") == false)) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(164)), c_orderQueueReplace);
            }
            else {
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(gv_team22);
    while (!PlayerGroupLoopDone()) {
        UnitGroupLoopBegin(UnitGroup(null, PlayerGroupLoopCurrent(), RegionFromId(8), UnitFilter(0, 0, (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            if ((UnitGetType(UnitGroupLoopCurrent()) != "SCV") && (UnitHasBehavior(UnitGroupLoopCurrent(), "ImmuneToFriendlySplash") == false)) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(18)), c_orderQueueReplace);
            }
            else {
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Region3stuck_Init () {
    gt_Region3stuck = TriggerCreate("gt_Region3stuck_Func");
    TriggerAddEventTimePeriodic(gt_Region3stuck, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Region4 stuck
//--------------------------------------------------------------------------------------------------
bool gt_Region4stuck_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_team12);
    while (!PlayerGroupLoopDone()) {
        UnitGroupLoopBegin(UnitGroup(null, PlayerGroupLoopCurrent(), RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            if ((UnitGetType(UnitGroupLoopCurrent()) != "SCV") && (UnitHasBehavior(UnitGroupLoopCurrent(), "ImmuneToFriendlySplash") == false)) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(19)), c_orderQueueReplace);
            }
            else {
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(gv_team22);
    while (!PlayerGroupLoopDone()) {
        UnitGroupLoopBegin(UnitGroup(null, PlayerGroupLoopCurrent(), RegionFromId(9), UnitFilter(0, 0, (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            if ((UnitGetType(UnitGroupLoopCurrent()) != "SCV") && (UnitHasBehavior(UnitGroupLoopCurrent(), "ImmuneToFriendlySplash") == false)) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(163)), c_orderQueueReplace);
            }
            else {
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Region4stuck_Init () {
    gt_Region4stuck = TriggerCreate("gt_Region4stuck_Func");
    TriggerAddEventTimePeriodic(gt_Region4stuck, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Region5
//--------------------------------------------------------------------------------------------------
bool gt_Region5_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) != true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SCV"))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "ImmuneToFriendlySplash") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_team12);
    while (!PlayerGroupLoopDone()) {
        if ((UnitGetOwner(EventUnit()) == PlayerGroupLoopCurrent())) {
            UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(161)), c_orderQueueAddToEnd);
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(gv_team22);
    while (!PlayerGroupLoopDone()) {
        if ((UnitGetOwner(EventUnit()) == PlayerGroupLoopCurrent())) {
            UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(149)), c_orderQueueReplace);
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Region5_Init () {
    gt_Region5 = TriggerCreate("gt_Region5_Func");
    TriggerAddEventUnitRegion(gt_Region5, null, RegionFromId(10), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Region6
//--------------------------------------------------------------------------------------------------
bool gt_Region6_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) != true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SCV"))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "ImmuneToFriendlySplash") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_team12);
    while (!PlayerGroupLoopDone()) {
        if ((UnitGetOwner(EventUnit()) == PlayerGroupLoopCurrent())) {
            UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(148)), c_orderQueueAddToEnd);
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(gv_team22);
    while (!PlayerGroupLoopDone()) {
        if ((UnitGetOwner(EventUnit()) == PlayerGroupLoopCurrent())) {
            UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(162)), c_orderQueueReplace);
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Region6_Init () {
    gt_Region6 = TriggerCreate("gt_Region6_Func");
    TriggerAddEventUnitRegion(gt_Region6, null, RegionFromId(11), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Region7
//--------------------------------------------------------------------------------------------------
bool gt_Region7_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) != true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SCV"))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "ImmuneToFriendlySplash") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_team12);
    while (!PlayerGroupLoopDone()) {
        if ((UnitGetOwner(EventUnit()) == PlayerGroupLoopCurrent())) {
            UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(163)), c_orderQueueAddToEnd);
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(gv_team22);
    while (!PlayerGroupLoopDone()) {
        if ((UnitGetOwner(EventUnit()) == PlayerGroupLoopCurrent())) {
            UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(149)), c_orderQueueReplace);
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Region7_Init () {
    gt_Region7 = TriggerCreate("gt_Region7_Func");
    TriggerAddEventUnitRegion(gt_Region7, null, RegionFromId(12), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Region8
//--------------------------------------------------------------------------------------------------
bool gt_Region8_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) != true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SCV"))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "ImmuneToFriendlySplash") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_team12);
    while (!PlayerGroupLoopDone()) {
        if ((UnitGetOwner(EventUnit()) == PlayerGroupLoopCurrent())) {
            UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(148)), c_orderQueueAddToEnd);
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(gv_team22);
    while (!PlayerGroupLoopDone()) {
        if ((UnitGetOwner(EventUnit()) == PlayerGroupLoopCurrent())) {
            UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(164)), c_orderQueueReplace);
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Region8_Init () {
    gt_Region8 = TriggerCreate("gt_Region8_Func");
    TriggerAddEventUnitRegion(gt_Region8, null, RegionFromId(13), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team1 Teleport
//--------------------------------------------------------------------------------------------------
bool gt_Team1Teleport_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "SCV") || (UnitGetType(EventUnit()) == "Maar") || (UnitGetType(EventUnit()) == "TalDarimMothership")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(EventUnit(), PointFromId(149), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Team1Teleport_Init () {
    gt_Team1Teleport = TriggerCreate("gt_Team1Teleport_Func");
    TriggerAddEventUnitRegion(gt_Team1Teleport, null, RegionFromId(16), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team2 Teleport
//--------------------------------------------------------------------------------------------------
bool gt_Team2Teleport_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "SCV") || (UnitGetType(EventUnit()) == "Maar") || (UnitGetType(EventUnit()) == "TalDarimMothership")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(EventUnit(), PointFromId(148), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Team2Teleport_Init () {
    gt_Team2Teleport = TriggerCreate("gt_Team2Teleport_Func");
    TriggerAddEventUnitRegion(gt_Team2Teleport, null, RegionFromId(17), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Anti Caging Team1
//--------------------------------------------------------------------------------------------------
bool gt_AntiCagingTeam1_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(26), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if (((UnitGetOwner(UnitGroupLoopCurrent()) == PlayerGroupPlayer(gv_team12, 1)) || (UnitGetOwner(UnitGroupLoopCurrent()) == PlayerGroupPlayer(gv_team12, 2)) || (UnitGetOwner(UnitGroupLoopCurrent()) == PlayerGroupPlayer(gv_team12, 3)) || (UnitGetOwner(UnitGroupLoopCurrent()) == PlayerGroupPlayer(gv_team12, 4)))) {
            if ((AIPathingCostUnit(UnitGroupLoopCurrent(), PointFromId(4), c_includeAllBuildings) == -1)) {
                UnitSetPosition(UnitGroupLoopCurrent(), PointWithOffset(UnitGetPosition(UnitGroupLoopCurrent()), 3.0, 0.0), false);
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffset(UnitGetPosition(UnitGroupLoopCurrent()), 15.0, 0.0)), c_orderQueueReplace);
            }
            else {
            }
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AntiCagingTeam1_Init () {
    gt_AntiCagingTeam1 = TriggerCreate("gt_AntiCagingTeam1_Func");
    TriggerAddEventTimePeriodic(gt_AntiCagingTeam1, 3.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Anti Caging Team2
//--------------------------------------------------------------------------------------------------
bool gt_AntiCagingTeam2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(27), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        if (((UnitGetOwner(UnitGroupLoopCurrent()) == PlayerGroupPlayer(gv_team22, 1)) || (UnitGetOwner(UnitGroupLoopCurrent()) == PlayerGroupPlayer(gv_team22, 2)) || (UnitGetOwner(UnitGroupLoopCurrent()) == PlayerGroupPlayer(gv_team22, 3)) || (UnitGetOwner(UnitGroupLoopCurrent()) == PlayerGroupPlayer(gv_team22, 4)))) {
            if ((AIPathingCostUnit(UnitGroupLoopCurrent(), PointFromId(5), c_includeAllBuildings) == -1)) {
                UnitSetPosition(UnitGroupLoopCurrent(), PointWithOffset(UnitGetPosition(UnitGroupLoopCurrent()), -3.0, 0.0), false);
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffset(UnitGetPosition(UnitGroupLoopCurrent()), -15.0, 0.0)), c_orderQueueReplace);
            }
            else {
            }
        }
        else {
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AntiCagingTeam2_Init () {
    gt_AntiCagingTeam2 = TriggerCreate("gt_AntiCagingTeam2_Func");
    TriggerAddEventTimePeriodic(gt_AntiCagingTeam2, 3.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team1 Comp Bottom 2
//--------------------------------------------------------------------------------------------------
bool gt_Team1CompBottom2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitInRegion(EventUnitProgressUnit(), RegionFromId(20)) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnitProgressUnit()), c_unitAttributeHeroic) != true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnitProgressUnit()), c_unitAttributeStructure) != true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitUncommandable(EventUnitProgressUnit(), true);
    UnitIssueOrder(EventUnitProgressUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(163)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Team1CompBottom2_Init () {
    gt_Team1CompBottom2 = TriggerCreate("gt_Team1CompBottom2_Func");
    TriggerAddEventUnitTrainProgress(gt_Team1CompBottom2, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team1 Comp Top
//--------------------------------------------------------------------------------------------------
bool gt_Team1CompTop_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitInRegion(EventUnitProgressUnit(), RegionFromId(14)) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnitProgressUnit()), c_unitAttributeHeroic) != true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnitProgressUnit()), c_unitAttributeStructure) != true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitUncommandable(EventUnitProgressUnit(), true);
    UnitIssueOrder(EventUnitProgressUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(161)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Team1CompTop_Init () {
    gt_Team1CompTop = TriggerCreate("gt_Team1CompTop_Func");
    TriggerAddEventUnitTrainProgress(gt_Team1CompTop, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team1 Comp Bottom 2 Stuck
//--------------------------------------------------------------------------------------------------
bool gt_Team1CompBottom2Stuck_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_team12);
    while (!PlayerGroupLoopDone()) {
        UnitGroupLoopBegin(UnitGroup(null, PlayerGroupLoopCurrent(), RegionFromId(20), UnitFilter(0, 0, (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            if ((UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeHeroic) != true) && (UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeStructure) != true) && (UnitGetType(UnitGroupLoopCurrent()) != "SCV") && (UnitHasBehavior(UnitGroupLoopCurrent(), "ImmuneToFriendlySplash") == false)) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(163)), c_orderQueueReplace);
                libNtve_gf_MakeUnitUncommandable(UnitGroupLoopCurrent(), true);
            }
            else {
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Team1CompBottom2Stuck_Init () {
    gt_Team1CompBottom2Stuck = TriggerCreate("gt_Team1CompBottom2Stuck_Func");
    TriggerAddEventTimePeriodic(gt_Team1CompBottom2Stuck, 60.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team1 Comp Top Stuck
//--------------------------------------------------------------------------------------------------
bool gt_Team1CompTopStuck_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_team12);
    while (!PlayerGroupLoopDone()) {
        UnitGroupLoopBegin(UnitGroup(null, PlayerGroupLoopCurrent(), RegionFromId(14), UnitFilter(0, 0, (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            if ((UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeHeroic) != true) && (UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeStructure) != true) && (UnitGetType(UnitGroupLoopCurrent()) != "SCV") && (UnitHasBehavior(UnitGroupLoopCurrent(), "ImmuneToFriendlySplash") == false)) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(161)), c_orderQueueReplace);
                libNtve_gf_MakeUnitUncommandable(UnitGroupLoopCurrent(), true);
            }
            else {
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Team1CompTopStuck_Init () {
    gt_Team1CompTopStuck = TriggerCreate("gt_Team1CompTopStuck_Func");
    TriggerAddEventTimePeriodic(gt_Team1CompTopStuck, 60.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team2 Comp Bottom 2
//--------------------------------------------------------------------------------------------------
bool gt_Team2CompBottom2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitInRegion(EventUnitProgressUnit(), RegionFromId(21)) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnitProgressUnit()), c_unitAttributeHeroic) != true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnitProgressUnit()), c_unitAttributeStructure) != true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitUncommandable(EventUnitProgressUnit(), true);
    UnitIssueOrder(EventUnitProgressUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(164)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Team2CompBottom2_Init () {
    gt_Team2CompBottom2 = TriggerCreate("gt_Team2CompBottom2_Func");
    TriggerAddEventUnitTrainProgress(gt_Team2CompBottom2, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team2 Comp Top
//--------------------------------------------------------------------------------------------------
bool gt_Team2CompTop_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_UnitInRegion(EventUnitProgressUnit(), RegionFromId(15)) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnitProgressUnit()), c_unitAttributeHeroic) != true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnitProgressUnit()), c_unitAttributeStructure) != true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitUncommandable(EventUnitProgressUnit(), true);
    UnitIssueOrder(EventUnitProgressUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(162)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Team2CompTop_Init () {
    gt_Team2CompTop = TriggerCreate("gt_Team2CompTop_Func");
    TriggerAddEventUnitTrainProgress(gt_Team2CompTop, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team2 Comp Bottom 2 Stuck
//--------------------------------------------------------------------------------------------------
bool gt_Team2CompBottom2Stuck_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_team22);
    while (!PlayerGroupLoopDone()) {
        UnitGroupLoopBegin(UnitGroup(null, PlayerGroupLoopCurrent(), RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            if ((UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeHeroic) != true) && (UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeStructure) != true) && (UnitGetType(UnitGroupLoopCurrent()) != "SCV") && (UnitHasBehavior(UnitGroupLoopCurrent(), "ImmuneToFriendlySplash") == false)) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(164)), c_orderQueueReplace);
                libNtve_gf_MakeUnitUncommandable(UnitGroupLoopCurrent(), true);
            }
            else {
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Team2CompBottom2Stuck_Init () {
    gt_Team2CompBottom2Stuck = TriggerCreate("gt_Team2CompBottom2Stuck_Func");
    TriggerAddEventTimePeriodic(gt_Team2CompBottom2Stuck, 60.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team2 Comp Top Stuck
//--------------------------------------------------------------------------------------------------
bool gt_Team2CompTopStuck_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_team22);
    while (!PlayerGroupLoopDone()) {
        UnitGroupLoopBegin(UnitGroup(null, PlayerGroupLoopCurrent(), RegionFromId(15), UnitFilter(0, 0, (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        while (!UnitGroupLoopDone()) {
            if ((UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeHeroic) != true) && (UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeStructure) != true) && (UnitGetType(UnitGroupLoopCurrent()) != "SCV") && (UnitHasBehavior(UnitGroupLoopCurrent(), "ImmuneToFriendlySplash") == false)) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(162)), c_orderQueueReplace);
                libNtve_gf_MakeUnitUncommandable(UnitGroupLoopCurrent(), true);
            }
            else {
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Team2CompTopStuck_Init () {
    gt_Team2CompTopStuck = TriggerCreate("gt_Team2CompTopStuck_Func");
    TriggerAddEventTimePeriodic(gt_Team2CompTopStuck, 60.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: comp scv build
//--------------------------------------------------------------------------------------------------
bool gt_compscvbuild_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnitProgressUnit()) == 9) || (UnitGetOwner(EventUnitProgressUnit()) == 10) || (PlayerStatus(EventPlayer()) == c_playerStatusLeft)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetOwner(EventUnitProgressUnit()) == 9) || ((PlayerGroupHasPlayer(gv_team12, EventPlayer()) == true) && (PlayerStatus(EventPlayer()) == c_playerStatusLeft)))) {
        UnitSetOwner(EventUnitProgressUnit(), PlayerGroupPlayer(gv_team1, RandomInt(1, PlayerGroupCount(gv_team1))), true);
    }
    else {
        if (((UnitGetOwner(EventUnitProgressUnit()) == 10) || ((PlayerGroupHasPlayer(gv_team22, EventPlayer()) == true) && (PlayerStatus(EventPlayer()) == c_playerStatusLeft)))) {
            UnitSetOwner(EventUnitProgressUnit(), PlayerGroupPlayer(gv_team2, RandomInt(1, PlayerGroupCount(gv_team2))), true);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_compscvbuild_Init () {
    gt_compscvbuild = TriggerCreate("gt_compscvbuild_Func");
    TriggerAddEventUnitConstructProgress(gt_compscvbuild, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kills
//--------------------------------------------------------------------------------------------------
bool gt_Kills_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitDamageSourceUnit()) == EventUnitDamageSourcePlayer()))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != EventUnitDamageSourcePlayer()))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) != true))) {
            return false;
        }

        if (!((EventUnitDamageSourcePlayer() <= 8))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerskills[EventUnitDamageSourcePlayer()]=gv_playerskills[EventUnitDamageSourcePlayer()] + 1;
    libNtve_gf_SetDialogItemText(gv_labelkills[EventUnitDamageSourcePlayer()], IntToText(gv_playerskills[EventUnitDamageSourcePlayer()]), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Kills_Init () {
    gt_Kills = TriggerCreate("gt_Kills_Func");
    TriggerAddEventUnitDied(gt_Kills, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show/Hide LB Button
//--------------------------------------------------------------------------------------------------
bool gt_ShowHideLBButton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rowoffset;

    // Variable Initialization
    lv_rowoffset = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_showHide == true)) {
        DialogSetVisible(gv_mainDialogwindow, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_mainDialogwindow2, PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemImage(gv_showHideButton, "Assets\\Textures\\con5_red.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_showHideButton, StringExternal("Param/Value/603B76C9"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemTooltip(gv_showHideButton, StringExternal("Param/Value/464E8035"), PlayerGroupSingle(EventPlayer()));
        gv_showHide = false;
    }
    else {
        DialogSetVisible(gv_mainDialogwindow, PlayerGroupSingle(EventPlayer()), true);
        DialogSetVisible(gv_mainDialogwindow2, PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemImage(gv_showHideButton, "Assets\\Textures\\con5_red.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_showHideButton, StringExternal("Param/Value/BB0C1940"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemTooltip(gv_showHideButton, StringExternal("Param/Value/E34CBFE6"), PlayerGroupSingle(EventPlayer()));
        gv_showHide = true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowHideLBButton_Init () {
    gt_ShowHideLBButton = TriggerCreate("gt_ShowHideLBButton_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leaderboard Intialization
//--------------------------------------------------------------------------------------------------
bool gt_LeaderboardIntialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rowoffset;

    // Variable Initialization
    lv_rowoffset = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(PlayerGroupActive());
    while(!PlayerGroupLoopDone()) {
        gv_banks[PlayerGroupLoopCurrent()] = BankLoad("nexuswarredux", PlayerGroupLoopCurrent());
        gv_wins[PlayerGroupLoopCurrent()] = BankValueGetAsInt(gv_banks[PlayerGroupLoopCurrent()], "record", "wins");
        gv_loss[PlayerGroupLoopCurrent()] = BankValueGetAsInt(gv_banks[PlayerGroupLoopCurrent()], "record", "loss");
        if(gv_wins[PlayerGroupLoopCurrent()] == 0 && gv_loss[PlayerGroupLoopCurrent()] == 0) {
            UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, StringExternal("Param/Value/D070E183"));
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();

    PlayerGroupLoopBegin(PlayerGroupActive());
    while (!PlayerGroupLoopDone()) {
        if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            gv_currentnoofplayers=gv_currentnoofplayers + 1;
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    DialogCreate(350, (197 + (gv_currentnoofplayers * 27)), c_anchorTopRight, 0, 45, true);
    gv_mainDialogwindow = DialogLastCreated();
    lv_rowoffset = 130;
    libNtve_gf_CreateDialogItemLabel(gv_mainDialogwindow, 200, 25, c_anchorTopLeft, 115, 50, StringExternal("Param/Value/0C7CBA90"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_mainDialogwindow, 150, 25, c_anchorTopLeft, 50, 80, StringExternal("Param/Value/E1124FBF"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_mainDialogwindow, 175, 25, c_anchorTopLeft, 185, 80, (IntToText(gv_timer2) + StringExternal("Param/Value/7C036310")), Color(100,100,100), false, 2.0);
    gv_timer = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_mainDialogwindow, 75, 25, c_anchorTopRight, 90, 110, StringExternal("Param/Value/74247F0F"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_mainDialogwindow, 75, 25, c_anchorTopRight, 35, 110, StringExternal("Param/Value/FF64936C"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_mainDialogwindow, 85, 25, c_anchorTopRight, 230, 110, StringExternal("Param/Value/B0EA5825"), Color(100,100,100), false, 2.0);
    PlayerGroupLoopBegin(gv_team1);
    while (!PlayerGroupLoopDone()) {
        if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            libNtve_gf_CreateDialogItemImage(gv_mainDialogwindow, 282, 37, c_anchorTopLeft, 35, (lv_rowoffset - 9), IntToText(gv_wins[PlayerGroupLoopCurrent()]) + StringToText("/") + IntToText(gv_loss[PlayerGroupLoopCurrent()]), "Assets\\Textures\\ui_battlenet_loading_bar_player_frame_highlighted_mod.dds", c_triggerImageTypeNormal, false, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), c_triggerBlendModeNormal);
            gv_nukeIndicator[PlayerGroupLoopCurrent()] = libNtve_gf_CreateDialogItemLabel(gv_mainDialogwindow, 25, 25, c_anchorTopLeft, 35, lv_rowoffset + 3, StringToText("*"), Color(100,100,100), false, 2.0);
            libNtve_gf_CreateDialogItemLabel(gv_mainDialogwindow, 125, 25, c_anchorTopLeft, 50, lv_rowoffset, PlayerName(PlayerGroupLoopCurrent()), Color(100,100,100), false, 2.0);
            libNtve_gf_CreateDialogItemLabel(gv_mainDialogwindow, 80, 25, c_anchorTopRight, 85, lv_rowoffset, IntToText(gv_playerskills[PlayerGroupLoopCurrent()]), Color(100,100,100), false, 2.0);
            gv_labelkills[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_mainDialogwindow, 75, 25, c_anchorTopRight, 17, lv_rowoffset, IntToText(gv_totalIncome[PlayerGroupLoopCurrent()]), Color(100,100,100), false, 2.0);
            gv_labelIncome[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            lv_rowoffset=lv_rowoffset + 27;
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    libNtve_gf_CreateDialogItemLabel(gv_mainDialogwindow, 75, 25, c_anchorTopRight, 90, lv_rowoffset, StringExternal("Param/Value/D444F8C9"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_mainDialogwindow, 75, 25, c_anchorTopRight, 35, lv_rowoffset, StringExternal("Param/Value/21E99E10"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_mainDialogwindow, 85, 25, c_anchorTopRight, 230, lv_rowoffset, StringExternal("Param/Value/68D94A33"), Color(100,100,100), false, 2.0);
    lv_rowoffset=lv_rowoffset + 27;
    PlayerGroupLoopBegin(gv_team2);
    while (!PlayerGroupLoopDone()) {
        if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            libNtve_gf_CreateDialogItemImage(gv_mainDialogwindow, 282, 37, c_anchorTopLeft, 35, (lv_rowoffset - 9), IntToText(gv_wins[PlayerGroupLoopCurrent()]) + StringToText("/") + IntToText(gv_loss[PlayerGroupLoopCurrent()]), "Assets\\Textures\\ui_battlenet_loading_bar_player_frame_highlighted_mod.dds", c_triggerImageTypeNormal, false, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), c_triggerBlendModeNormal);
            gv_nukeIndicator[PlayerGroupLoopCurrent()] = libNtve_gf_CreateDialogItemLabel(gv_mainDialogwindow, 25, 25, c_anchorTopLeft, 35, lv_rowoffset + 3, StringToText("*"), Color(100,100,100), false, 2.0);
            libNtve_gf_CreateDialogItemLabel(gv_mainDialogwindow, 125, 25, c_anchorTopLeft, 50, lv_rowoffset, PlayerName(PlayerGroupLoopCurrent()), Color(100,100,100), false, 2.0);
            libNtve_gf_CreateDialogItemLabel(gv_mainDialogwindow, 80, 25, c_anchorTopRight, 85, lv_rowoffset, IntToText(gv_playerskills[PlayerGroupLoopCurrent()]), Color(100,100,100), false, 2.0);
            gv_labelkills[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_mainDialogwindow, 75, 25, c_anchorTopRight, 17, lv_rowoffset, IntToText(gv_totalIncome[PlayerGroupLoopCurrent()]), Color(100,100,100), false, 2.0);
            gv_labelIncome[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
            lv_rowoffset=lv_rowoffset + 27;
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    DialogSetVisible(gv_mainDialogwindow, PlayerGroupAll(), true);
    gv_rowOffsetfortheme = lv_rowoffset;
    gv_currentnoofplayers = 0;
    gv_rowOffsetfortheme = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeaderboardIntialization_Init () {
    gt_LeaderboardIntialization = TriggerCreate("gt_LeaderboardIntialization_Func");
    TriggerAddEventTimeElapsed(gt_LeaderboardIntialization, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leaderboard Intialization 2
//--------------------------------------------------------------------------------------------------
bool gt_LeaderboardIntialization2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rowoffset;

    // Variable Initialization
    lv_rowoffset = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(PlayerGroupActive());
    while (!PlayerGroupLoopDone()) {
        if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            gv_currentnoofplayers=gv_currentnoofplayers + 1;
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    DialogCreate(350, 220, c_anchorTopRight, 0, 45, true);
    gv_mainDialogwindow2 = DialogLastCreated();
    lv_rowoffset = 130;
    libNtve_gf_CreateDialogItemLabel(gv_mainDialogwindow2, 200, 25, c_anchorTopLeft, 115, 50, StringExternal("Param/Value/687036F5"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_mainDialogwindow2, 150, 25, c_anchorTopLeft, 50, 80, StringExternal("Param/Value/74362389"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_mainDialogwindow2, 175, 25, c_anchorTopLeft, 185, 80, (IntToText(gv_timer2) + StringExternal("Param/Value/B51CF305")), Color(100,100,100), false, 2.0);
    gv_timer3 = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_mainDialogwindow2, 75, 25, c_anchorTopRight, 90, 110, StringExternal("Param/Value/9063A5B9"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_mainDialogwindow2, 75, 25, c_anchorTopRight, 35, 110, StringExternal("Param/Value/62DAD0F7"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_mainDialogwindow2, 125, 25, c_anchorTopLeft, 50, lv_rowoffset, StringExternal("Param/Value/97AAC726"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_mainDialogwindow2, 75, 25, c_anchorTopRight, 80, lv_rowoffset, IntToText(gv_team1kills), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
    gv_labelTeam1kills = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_mainDialogwindow2, 75, 25, c_anchorTopRight, 17, lv_rowoffset, IntToText(gv_totalIncomeTeam1), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
    gv_labelTeam1Income = DialogControlLastCreated();
    lv_rowoffset=lv_rowoffset + 27;
    libNtve_gf_CreateDialogItemLabel(gv_mainDialogwindow2, 125, 25, c_anchorTopLeft, 50, lv_rowoffset, StringExternal("Param/Value/EA79B98F"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_mainDialogwindow2, 75, 25, c_anchorTopRight, 80, lv_rowoffset, IntToText(gv_team2kills), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
    gv_labelTeam2kills = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_mainDialogwindow2, 75, 25, c_anchorTopRight, 17, lv_rowoffset, IntToText(gv_totalIncomeTeam2), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false)), false, 2.0);
    gv_labelTeam2Income = DialogControlLastCreated();
    lv_rowoffset=lv_rowoffset + 27;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeaderboardIntialization2_Init () {
    gt_LeaderboardIntialization2 = TriggerCreate("gt_LeaderboardIntialization2_Func");
    TriggerAddEventTimeElapsed(gt_LeaderboardIntialization2, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timer Update
//--------------------------------------------------------------------------------------------------
bool gt_TimerUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_timer2 >= 1)) {
        gv_timer2=gv_timer2 - 1;
        libNtve_gf_SetDialogItemText(gv_timer, IntToText(gv_timer2), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_timer3, IntToText(gv_timer2), PlayerGroupAll());
    }
    else {
        if ((gv_timer2 == 0)) {
            gv_timer2 = 19;
            libNtve_gf_SetDialogItemText(gv_timer, TextWithColor(StringExternal("Param/Value/2547FCFD"), Color(100.00, 100.00, 100.00)), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(gv_timer3, TextWithColor(StringExternal("Param/Value/9CA77AA2"), Color(100.00, 100.00, 100.00)), PlayerGroupAll());
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TimerUpdate_Init () {
    gt_TimerUpdate = TriggerCreate("gt_TimerUpdate_Func");
    TriggerEnable(gt_TimerUpdate, false);
    TriggerAddEventTimePeriodic(gt_TimerUpdate, 1.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timer Set
//--------------------------------------------------------------------------------------------------
bool gt_TimerSet_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_timer2 = 19;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TimerSet_Init () {
    gt_TimerSet = TriggerCreate("gt_TimerSet_Func");
    TriggerEnable(gt_TimerSet, false);
    TriggerAddEventMapInit(gt_TimerSet);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timer Update 2
//--------------------------------------------------------------------------------------------------
bool gt_TimerUpdate2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_timer2 >= 1)) {
        gv_timer2=gv_timer2 - 1;
        libNtve_gf_SetDialogItemText(gv_timer, IntToText(gv_timer2), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_timer3, IntToText(gv_timer2), PlayerGroupAll());
    }
    else {
        if ((gv_timer2 == 0)) {
            gv_timer2 = 14;
            libNtve_gf_SetDialogItemText(gv_timer, TextWithColor(StringExternal("Param/Value/D274BDB7"), Color(100.00, 100.00, 100.00)), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(gv_timer3, TextWithColor(StringExternal("Param/Value/EE1F7EE2"), Color(100.00, 100.00, 100.00)), PlayerGroupAll());
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TimerUpdate2_Init () {
    gt_TimerUpdate2 = TriggerCreate("gt_TimerUpdate2_Func");
    TriggerEnable(gt_TimerUpdate2, false);
    TriggerAddEventTimePeriodic(gt_TimerUpdate2, 1.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timer Set 2
//--------------------------------------------------------------------------------------------------
bool gt_TimerSet2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_timer2 = 14;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TimerSet2_Init () {
    gt_TimerSet2 = TriggerCreate("gt_TimerSet2_Func");
    TriggerEnable(gt_TimerSet2, false);
    TriggerAddEventMapInit(gt_TimerSet2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: button
//--------------------------------------------------------------------------------------------------
bool gt_button_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_DisplayScreenButton(5, StringExternal("Param/Value/1A492F42"), 25, 25, c_anchorTopRight, 15, 35, gt_ShowHideLBButton);
    gv_showHideButton = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTooltip(gv_showHideButton, StringExternal("Param/Value/F7D4F1C0"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_showHideButton, "Assets\\Textures\\con5_red.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(gv_showHideButton, "Assets\\Textures\\con5_red.dds", PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_button_Init () {
    gt_button = TriggerCreate("gt_button_Func");
    TriggerAddEventTimeElapsed(gt_button, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fog of War
//--------------------------------------------------------------------------------------------------
bool gt_FogofWar_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    VisRevealerCreate(1, RegionFromId(5));
    VisRevealerCreate(2, RegionFromId(5));
    VisRevealerCreate(3, RegionFromId(5));
    VisRevealerCreate(4, RegionFromId(5));
    VisRevealerCreate(5, RegionFromId(5));
    VisRevealerCreate(6, RegionFromId(5));
    VisRevealerCreate(7, RegionFromId(5));
    VisRevealerCreate(8, RegionFromId(5));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FogofWar_Init () {
    gt_FogofWar = TriggerCreate("gt_FogofWar_Func");
    TriggerEnable(gt_FogofWar, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Initialization
//--------------------------------------------------------------------------------------------------
bool gt_MapInitialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    RegionPlayableMapSet(RegionFromId(5));
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(1));
    while (!PlayerGroupLoopDone()) {
        if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            PlayerGroupAdd(gv_team1, PlayerGroupLoopCurrent());
            PlayerGroupAdd(gv_team12, PlayerGroupLoopCurrent());
            libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), 9, 4);
            libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), 10, 5);
            CameraPan(PlayerGroupLoopCurrent(), RegionGetCenter(RegionFromId(3)), 0.0, -1, 10, false);
            VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(26));
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(2));
    while (!PlayerGroupLoopDone()) {
        if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            PlayerGroupAdd(gv_team2, PlayerGroupLoopCurrent());
            PlayerGroupAdd(gv_team22, PlayerGroupLoopCurrent());
            libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), 10, 4);
            libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), 9, 5);
            CameraPan(PlayerGroupLoopCurrent(), RegionGetCenter(RegionFromId(4)), 0.0, -1, 10, false);
            VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(27));
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    IntLoopBegin(1, 8);
    while (!IntLoopDone()) {
        VisRevealerCreate(IntLoopCurrent(), RegionFromId(5));
        Wait(0.5, c_timeGame);
        VisRevealerDestroy(VisRevealerLastCreated());
        PlayerGroupAdd(gv_allPlayers, IntLoopCurrent());
        IntLoopStep();
    }
    IntLoopEnd();
    PlayerGroupLoopBegin(PlayerGroupActive());
    while (!PlayerGroupLoopDone()) {
        if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropMinerals, c_playerPropOperSetTo, 100);
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    if(PlayerGroupCount(gv_team12) > 0 && PlayerGroupCount(gv_team22) > 0) {
        gv_validGame = true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MapInitialization_Init () {
    gt_MapInitialization = TriggerCreate("gt_MapInitialization_Func");
    TriggerAddEventMapInit(gt_MapInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Run triggers
//--------------------------------------------------------------------------------------------------
bool gt_Runtriggers_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_Level, true);
    TriggerEnable(gt_TimerSet2, true);
    Wait(0.5, c_timeGame);
    TriggerEnable(gt_TimerUpdate2, true);
    TriggerEnable(gt_Income, true);
    TriggerExecute(gt_Food90, true, false);
    Wait(0.5, c_timeGame);
    TriggerEnable(gt_LeaverSupply, true);
    TriggerEnable(gt_Leave, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Runtriggers_Init () {
    gt_Runtriggers = TriggerCreate("gt_Runtriggers_Func");
    TriggerAddEventTimeElapsed(gt_Runtriggers, 1.75, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SCV create 2
//--------------------------------------------------------------------------------------------------
bool gt_SCVcreate2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_team1);
    while (!PlayerGroupLoopDone()) {
        if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            libNtve_gf_UnitCreateFacingPoint(1, "SCV", 0, PlayerGroupLoopCurrent(), RegionGetCenter(RegionFromId(3)), RegionGetCenter(RegionFromId(19)));
            UnitControlGroupAddUnit(PlayerGroupLoopCurrent(), 1, UnitLastCreated());
            UnitControlGroupAddUnit(PlayerGroupLoopCurrent(), 2, UnitLastCreated());
            UnitControlGroupAddUnit(PlayerGroupLoopCurrent(), 3, UnitLastCreated());
            UnitControlGroupAddUnit(PlayerGroupLoopCurrent(), 4, UnitLastCreated());
            UnitSelect(UnitLastCreated(), PlayerGroupLoopCurrent(), true);
            libNtve_gf_MakeUnitUncommandable(UnitLastCreated(), true);
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(gv_team2);
    while (!PlayerGroupLoopDone()) {
        if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            libNtve_gf_UnitCreateFacingPoint(1, "SCV", 0, PlayerGroupLoopCurrent(), RegionGetCenter(RegionFromId(4)), RegionGetCenter(RegionFromId(18)));
            UnitControlGroupAddUnit(PlayerGroupLoopCurrent(), 1, UnitLastCreated());
            UnitControlGroupAddUnit(PlayerGroupLoopCurrent(), 2, UnitLastCreated());
            UnitControlGroupAddUnit(PlayerGroupLoopCurrent(), 3, UnitLastCreated());
            UnitControlGroupAddUnit(PlayerGroupLoopCurrent(), 4, UnitLastCreated());
            UnitSelect(UnitLastCreated(), PlayerGroupLoopCurrent(), true);
            libNtve_gf_MakeUnitUncommandable(UnitLastCreated(), true);
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(gv_team1);
    while (!PlayerGroupLoopDone()) {
        if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            libNtve_gf_UnitCreateFacingPoint(1, "CreepTumorBurrowed", 0, PlayerGroupLoopCurrent(), RegionGetCenter(RegionFromId(18)), RegionGetCenter(RegionFromId(18)));
            gv_smiley[PlayerGroupLoopCurrent()] = UnitLastCreated();
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(gv_team2);
    while (!PlayerGroupLoopDone()) {
        if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            libNtve_gf_UnitCreateFacingPoint(1, "CreepTumorBurrowed", 0, PlayerGroupLoopCurrent(), RegionGetCenter(RegionFromId(19)), RegionGetCenter(RegionFromId(18)));
            gv_smiley[PlayerGroupLoopCurrent()] = UnitLastCreated();
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("CreepTumorBurrowed", c_playerAny, RegionFromId(18), UnitFilter(0, 0, 0, 0), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_smiley1group, UnitGroupLoopCurrent());
        gv_smiley1 = UnitGroupCount(gv_smiley1group, c_unitCountAlive);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("CreepTumorBurrowed", c_playerAny, RegionFromId(19), UnitFilter(0, 0, 0, 0), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_smiley2group, UnitGroupLoopCurrent());
        gv_smiley2 = UnitGroupCount(gv_smiley2group, c_unitCountAlive);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    if ((gv_smiley1 == 3)) {
        libNtve_gf_UnitCreateFacingPoint(1, "SCV", 0, 9, RegionGetCenter(RegionFromId(3)), RegionGetCenter(RegionFromId(18)));
        libNtve_gf_MakeUnitUncommandable(UnitLastCreated(), true);
        UnitSetOwner(UnitLastCreated(), PlayerGroupPlayer(gv_team1, 1), true);
        PlayerModifyPropertyInt(PlayerGroupPlayer(gv_team1, 1), c_playerPropMinerals, c_playerPropOperAdd, 25);
        PlayerModifyPropertyInt(PlayerGroupPlayer(gv_team1, 2), c_playerPropMinerals, c_playerPropOperAdd, 25);
        PlayerModifyPropertyInt(PlayerGroupPlayer(gv_team1, 3), c_playerPropMinerals, c_playerPropOperAdd, 25);
    }
    else {
        if ((gv_smiley1 == 2)) {
            libNtve_gf_UnitCreateFacingPoint(1, "SCV", 0, 9, RegionGetCenter(RegionFromId(3)), RegionGetCenter(RegionFromId(18)));
            libNtve_gf_MakeUnitUncommandable(UnitLastCreated(), true);
            UnitSetOwner(UnitLastCreated(), PlayerGroupPlayer(gv_team1, 1), true);
            libNtve_gf_UnitCreateFacingPoint(1, "SCV", 0, 9, RegionGetCenter(RegionFromId(3)), RegionGetCenter(RegionFromId(18)));
            libNtve_gf_MakeUnitUncommandable(UnitLastCreated(), true);
            UnitSetOwner(UnitLastCreated(), PlayerGroupPlayer(gv_team1, 2), true);
            PlayerModifyPropertyInt(PlayerGroupPlayer(gv_team1, 1), c_playerPropMinerals, c_playerPropOperAdd, 50);
            PlayerModifyPropertyInt(PlayerGroupPlayer(gv_team1, 2), c_playerPropMinerals, c_playerPropOperAdd, 50);
        }
        else {
            if ((gv_smiley1 == 1)) {
                libNtve_gf_UnitCreateFacingPoint(1, "SCV", 0, 9, RegionGetCenter(RegionFromId(3)), RegionGetCenter(RegionFromId(18)));
                libNtve_gf_MakeUnitUncommandable(UnitLastCreated(), true);
                UnitSetOwner(UnitLastCreated(), PlayerGroupPlayer(gv_team1, 1), true);
                libNtve_gf_UnitCreateFacingPoint(1, "SCV", 0, 9, RegionGetCenter(RegionFromId(3)), RegionGetCenter(RegionFromId(18)));
                libNtve_gf_MakeUnitUncommandable(UnitLastCreated(), true);
                UnitSetOwner(UnitLastCreated(), PlayerGroupPlayer(gv_team1, 1), true);
                libNtve_gf_UnitCreateFacingPoint(1, "SCV", 0, 9, RegionGetCenter(RegionFromId(3)), RegionGetCenter(RegionFromId(18)));
                libNtve_gf_MakeUnitUncommandable(UnitLastCreated(), true);
                UnitSetOwner(UnitLastCreated(), PlayerGroupPlayer(gv_team1, 1), true);
                PlayerModifyPropertyInt(PlayerGroupPlayer(gv_team1, 1), c_playerPropMinerals, c_playerPropOperAdd, 100);
            }
            else {
            }
        }
    }
    if ((gv_smiley2 == 3)) {
        libNtve_gf_UnitCreateFacingPoint(1, "SCV", 0, 10, RegionGetCenter(RegionFromId(4)), RegionGetCenter(RegionFromId(18)));
        libNtve_gf_MakeUnitUncommandable(UnitLastCreated(), true);
        UnitSetOwner(UnitLastCreated(), PlayerGroupPlayer(gv_team2, 1), true);
        PlayerModifyPropertyInt(PlayerGroupPlayer(gv_team2, 1), c_playerPropMinerals, c_playerPropOperAdd, 25);
        PlayerModifyPropertyInt(PlayerGroupPlayer(gv_team2, 2), c_playerPropMinerals, c_playerPropOperAdd, 25);
        PlayerModifyPropertyInt(PlayerGroupPlayer(gv_team2, 3), c_playerPropMinerals, c_playerPropOperAdd, 25);
    }
    else {
        if ((gv_smiley2 == 2)) {
            libNtve_gf_UnitCreateFacingPoint(1, "SCV", 0, 10, RegionGetCenter(RegionFromId(4)), RegionGetCenter(RegionFromId(18)));
            libNtve_gf_MakeUnitUncommandable(UnitLastCreated(), true);
            UnitSetOwner(UnitLastCreated(), PlayerGroupPlayer(gv_team2, 1), true);
            libNtve_gf_UnitCreateFacingPoint(1, "SCV", 0, 10, RegionGetCenter(RegionFromId(4)), RegionGetCenter(RegionFromId(18)));
            libNtve_gf_MakeUnitUncommandable(UnitLastCreated(), true);
            UnitSetOwner(UnitLastCreated(), PlayerGroupPlayer(gv_team2, 2), true);
            PlayerModifyPropertyInt(PlayerGroupPlayer(gv_team2, 1), c_playerPropMinerals, c_playerPropOperAdd, 50);
            PlayerModifyPropertyInt(PlayerGroupPlayer(gv_team2, 2), c_playerPropMinerals, c_playerPropOperAdd, 50);
        }
        else {
            if ((gv_smiley2 == 1)) {
                libNtve_gf_UnitCreateFacingPoint(1, "SCV", 0, 10, RegionGetCenter(RegionFromId(4)), RegionGetCenter(RegionFromId(18)));
                libNtve_gf_MakeUnitUncommandable(UnitLastCreated(), true);
                UnitSetOwner(UnitLastCreated(), PlayerGroupPlayer(gv_team2, 1), true);
                libNtve_gf_UnitCreateFacingPoint(1, "SCV", 0, 10, RegionGetCenter(RegionFromId(4)), RegionGetCenter(RegionFromId(18)));
                libNtve_gf_MakeUnitUncommandable(UnitLastCreated(), true);
                UnitSetOwner(UnitLastCreated(), PlayerGroupPlayer(gv_team2, 1), true);
                libNtve_gf_UnitCreateFacingPoint(1, "SCV", 0, 10, RegionGetCenter(RegionFromId(4)), RegionGetCenter(RegionFromId(18)));
                libNtve_gf_MakeUnitUncommandable(UnitLastCreated(), true);
                UnitSetOwner(UnitLastCreated(), PlayerGroupPlayer(gv_team2, 1), true);
                PlayerModifyPropertyInt(PlayerGroupPlayer(gv_team2, 1), c_playerPropMinerals, c_playerPropOperAdd, 100);
            }
            else {
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SCVcreate2_Init () {
    gt_SCVcreate2 = TriggerCreate("gt_SCVcreate2_Func");
    TriggerAddEventTimeElapsed(gt_SCVcreate2, 4.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Food 60
//--------------------------------------------------------------------------------------------------
bool gt_Food60_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(PlayerGroupActive());
    while (!PlayerGroupLoopDone()) {
        if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropTerrazine, c_playerPropOperSetTo, 1);
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropSuppliesLimit, c_playerPropOperSetTo, 60);
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Food60_Init () {
    gt_Food60 = TriggerCreate("gt_Food60_Func");
    TriggerEnable(gt_Food60, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Food 90
//--------------------------------------------------------------------------------------------------
bool gt_Food90_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(9, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 0);
    PlayerModifyPropertyInt(10, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 0);
    PlayerGroupLoopBegin(PlayerGroupActive());
    while (!PlayerGroupLoopDone()) {
        if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropTerrazine, c_playerPropOperSetTo, 2);
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropSuppliesLimit, c_playerPropOperSetTo, 90);
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Food90_Init () {
    gt_Food90 = TriggerCreate("gt_Food90_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: SCV commandable
//--------------------------------------------------------------------------------------------------
bool gt_SCVcommandable_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("SCV", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_MakeUnitUncommandable(UnitGroupLoopCurrent(), false);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SCVcommandable_Init () {
    gt_SCVcommandable = TriggerCreate("gt_SCVcommandable_Func");
    TriggerAddEventTimeElapsed(gt_SCVcommandable, 4.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Time
//--------------------------------------------------------------------------------------------------
bool gt_Time_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(120, 35, c_anchorTop, 0, 45, true);
    gv_time = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_time, 120, 35, c_anchorTopLeft, 50, 7, (IntToText(gv_seconds) + StringExternal("Param/Value/8E7D7A21")), Color(100,100,100), false, 2.0);
    gv_time2 = DialogControlLastCreated();
    DialogSetVisible(gv_time, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Time_Init () {
    gt_Time = TriggerCreate("gt_Time_Func");
    TriggerAddEventTimeElapsed(gt_Time, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Time Update
//--------------------------------------------------------------------------------------------------
bool gt_TimeUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_seconds=gv_seconds + 1;
    libNtve_gf_SetDialogItemText(gv_time2, FormatDuration(gv_seconds), PlayerGroupAll());
    if ((gv_seconds == 60)) {
        DialogControlSetPosition(gv_time2, PlayerGroupAll(), c_anchorTopLeft, 32, 7);
    }
    else {
    }
    if ((gv_seconds == 10)) {
        DialogControlSetPosition(gv_time2, PlayerGroupAll(), c_anchorTopLeft, 43, 7);
    }
    else {
    }
    if ((gv_seconds == 600)) {
        DialogControlSetPosition(gv_time2, PlayerGroupAll(), c_anchorTopLeft, 29, 7);
    }
    else {
    }

    if(gv_seconds > 5) {
        if(gv_smiley1 == 0) {
            // gt_Team2Win_Func(false, true);

            UnitGroupLoopBegin(UnitGroup("Nexus", 9, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 1));
            while(!UnitGroupLoopDone()) {
                UnitKill(UnitGroupLoopCurrent());
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
        }
        else {
            if(gv_smiley2 == 0) {
                // gt_Team1Win_Func(false, true);

                UnitGroupLoopBegin(UnitGroup("Nexus", 10, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 1));
                while(!UnitGroupLoopDone()) {
                    UnitKill(UnitGroupLoopCurrent());
                    UnitGroupLoopStep();
                }
                UnitGroupLoopEnd();
            }
        }
    }
    if(gv_drawTimer > 0) {
        gv_drawTimer = gv_drawTimer - 1;
        if(gv_drawTimer == 300) {
            gt_DrawResult();
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TimeUpdate_Init () {
    gt_TimeUpdate = TriggerCreate("gt_TimeUpdate_Func");
    TriggerAddEventTimePeriodic(gt_TimeUpdate, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team1 Win
//--------------------------------------------------------------------------------------------------
bool gt_Team1Win_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 10))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Nexus"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_Leave, false);
    gv_nexus2Dead = true;
    gv_gameover = true;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/D6B2BE64"));
    IntLoopBegin(1, 8);
    while (!IntLoopDone()) {
        VisRevealerCreate(IntLoopCurrent(), RegionFromId(5));
        UnitRemove(gv_smiley[IntLoopCurrent()]);
        IntLoopStep();
    }
    IntLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    CameraPan(1, RegionGetCenter(RegionFromId(19)), 1.0, -1, 10, false);
    CameraPan(2, RegionGetCenter(RegionFromId(19)), 1.0, -1, 10, false);
    CameraPan(3, RegionGetCenter(RegionFromId(19)), 1.0, -1, 10, false);
    CameraPan(4, RegionGetCenter(RegionFromId(19)), 1.0, -1, 10, false);
    CameraPan(5, RegionGetCenter(RegionFromId(19)), 1.0, -1, 10, false);
    CameraPan(6, RegionGetCenter(RegionFromId(19)), 1.0, -1, 10, false);
    CameraPan(3, RegionGetCenter(RegionFromId(19)), 1.0, -1, 10, false);
    CameraPan(7, RegionGetCenter(RegionFromId(19)), 1.0, -1, 10, false);
    CameraPan(8, RegionGetCenter(RegionFromId(19)), 1.0, -1, 10, false);
    Wait(5.0, c_timeGame);
    PlayerGroupLoopBegin(gv_team1);
    while (!PlayerGroupLoopDone()) {
        if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            GameVictory(PlayerGroupLoopCurrent());
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(gv_team2);
    while (!PlayerGroupLoopDone()) {
        if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            GameDefeat(PlayerGroupLoopCurrent());
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Team1Win_Init () {
    gt_Team1Win = TriggerCreate("gt_Team1Win_Func");
    TriggerAddEventUnitDied(gt_Team1Win, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team2 Win
//--------------------------------------------------------------------------------------------------
bool gt_Team2Win_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 9))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Nexus"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_Leave, false);
    gv_nexus1Dead = true;
    gv_gameover = true;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/A8956CB4"));
    IntLoopBegin(1, 8);
    while (!IntLoopDone()) {
        VisRevealerCreate(IntLoopCurrent(), RegionFromId(5));
        UnitRemove(gv_smiley[IntLoopCurrent()]);
        IntLoopStep();
    }
    IntLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    while (!UnitGroupLoopDone()) {
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    CameraPan(1, RegionGetCenter(RegionFromId(18)), 1.0, -1, 10, false);
    CameraPan(2, RegionGetCenter(RegionFromId(18)), 1.0, -1, 10, false);
    CameraPan(3, RegionGetCenter(RegionFromId(18)), 1.0, -1, 10, false);
    CameraPan(4, RegionGetCenter(RegionFromId(18)), 1.0, -1, 10, false);
    CameraPan(5, RegionGetCenter(RegionFromId(18)), 1.0, -1, 10, false);
    CameraPan(6, RegionGetCenter(RegionFromId(18)), 1.0, -1, 10, false);
    CameraPan(7, RegionGetCenter(RegionFromId(18)), 1.0, -1, 10, false);
    CameraPan(8, RegionGetCenter(RegionFromId(18)), 1.0, -1, 10, false);
    Wait(5.0, c_timeGame);
    PlayerGroupLoopBegin(gv_team1);
    while (!PlayerGroupLoopDone()) {
        if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            GameDefeat(PlayerGroupLoopCurrent());
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(gv_team2);
    while (!PlayerGroupLoopDone()) {
        if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            GameVictory(PlayerGroupLoopCurrent());
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Team2Win_Init () {
    gt_Team2Win = TriggerCreate("gt_Team2Win_Func");
    TriggerAddEventUnitDied(gt_Team2Win, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: End Game2
//--------------------------------------------------------------------------------------------------
bool gt_EndGame2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/D070E173"));
    TriggerEnable(gt_EndGame3, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EndGame2_Init () {
    gt_EndGame2 = TriggerCreate("gt_EndGame2_Func");
    TriggerAddEventTimeElapsed(gt_EndGame2, 2400.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: End Game 3
//--------------------------------------------------------------------------------------------------
bool gt_EndGame3_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        libNtve_gf_ChangeUnitDamage(UnitGroupLoopCurrent(), 1, 3);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EndGame3_Init () {
    gt_EndGame3 = TriggerCreate("gt_EndGame3_Func");
    TriggerEnable(gt_EndGame3, false);
    TriggerAddEventTimePeriodic(gt_EndGame3, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leave
//--------------------------------------------------------------------------------------------------
bool gt_Leave_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerStatus(1) == c_playerStatusLeft) && (gv_player[1] == false)) {
        UnitRemove(gv_smiley[1]);
        TriggerExecute(gt_Leaverunits, true, false);
        TriggerExecute(gt_LeaverSupply, true, false);
    }
    else {
    }
    if ((PlayerStatus(2) == c_playerStatusLeft) && (gv_player[2] == false)) {
        UnitRemove(gv_smiley[2]);
        TriggerExecute(gt_Leaverunits, true, false);
        TriggerExecute(gt_LeaverSupply, true, false);
    }
    else {
    }
    if ((PlayerStatus(3) == c_playerStatusLeft) && (gv_player[3] == false)) {
        UnitRemove(gv_smiley[3]);
        TriggerExecute(gt_Leaverunits, true, false);
        TriggerExecute(gt_LeaverSupply, true, false);
    }
    else {
    }
    if ((PlayerStatus(4) == c_playerStatusLeft) && (gv_player[4] == false)) {
        UnitRemove(gv_smiley[4]);
        TriggerExecute(gt_Leaverunits, true, false);
        TriggerExecute(gt_LeaverSupply, true, false);
    }
    else {
    }
    if ((PlayerStatus(5) == c_playerStatusLeft) && (gv_player[5] == false)) {
        UnitRemove(gv_smiley[5]);
        TriggerExecute(gt_Leaverunits, true, false);
        TriggerExecute(gt_LeaverSupply, true, false);
    }
    else {
    }
    if ((PlayerStatus(6) == c_playerStatusLeft) && (gv_player[6] == false)) {
        UnitRemove(gv_smiley[6]);
        TriggerExecute(gt_Leaverunits, true, false);
        TriggerExecute(gt_LeaverSupply, true, false);
    }
    else {
    }
    if ((PlayerStatus(7) == c_playerStatusLeft) && (gv_player[7] == false)) {
        UnitRemove(gv_smiley[7]);
        TriggerExecute(gt_Leaverunits, true, false);
        TriggerExecute(gt_LeaverSupply, true, false);
    }
    else {
    }
    if ((PlayerStatus(8) == c_playerStatusLeft) && (gv_player[8] == false)) {
        UnitRemove(gv_smiley[8]);
        TriggerExecute(gt_Leaverunits, true, false);
        TriggerExecute(gt_LeaverSupply, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Leave_Init () {
    gt_Leave = TriggerCreate("gt_Leave_Func");
    TriggerEnable(gt_Leave, false);
    TriggerAddEventTimePeriodic(gt_Leave, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leave 2
//--------------------------------------------------------------------------------------------------
bool gt_Leave2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerStatus(1) == c_playerStatusLeft) && (gv_player[1] == false)) {
        UnitRemove(gv_smiley[1]);
        TriggerExecute(gt_Leaverunits, true, false);
        TriggerExecute(gt_LeaverSupply3, true, false);
    }
    else {
    }
    if ((PlayerStatus(2) == c_playerStatusLeft) && (gv_player[2] == false)) {
        UnitRemove(gv_smiley[2]);
        TriggerExecute(gt_Leaverunits, true, false);
        TriggerExecute(gt_LeaverSupply3, true, false);
    }
    else {
    }
    if ((PlayerStatus(3) == c_playerStatusLeft) && (gv_player[3] == false)) {
        UnitRemove(gv_smiley[3]);
        TriggerExecute(gt_Leaverunits, true, false);
        TriggerExecute(gt_LeaverSupply3, true, false);
    }
    else {
    }
    if ((PlayerStatus(4) == c_playerStatusLeft) && (gv_player[4] == false)) {
        UnitRemove(gv_smiley[4]);
        TriggerExecute(gt_Leaverunits, true, false);
        TriggerExecute(gt_LeaverSupply3, true, false);
    }
    else {
    }
    if ((PlayerStatus(5) == c_playerStatusLeft) && (gv_player[5] == false)) {
        UnitRemove(gv_smiley[5]);
        TriggerExecute(gt_Leaverunits, true, false);
        TriggerExecute(gt_LeaverSupply3, true, false);
    }
    else {
    }
    if ((PlayerStatus(6) == c_playerStatusLeft) && (gv_player[6] == false)) {
        UnitRemove(gv_smiley[6]);
        TriggerExecute(gt_Leaverunits, true, false);
        TriggerExecute(gt_LeaverSupply3, true, false);
    }
    else {
    }
    if ((PlayerStatus(7) == c_playerStatusLeft) && (gv_player[7] == false)) {
        UnitRemove(gv_smiley[7]);
        TriggerExecute(gt_Leaverunits, true, false);
        TriggerExecute(gt_LeaverSupply3, true, false);
    }
    else {
    }
    if ((PlayerStatus(8) == c_playerStatusLeft) && (gv_player[8] == false)) {
        UnitRemove(gv_smiley[8]);
        TriggerExecute(gt_Leaverunits, true, false);
        TriggerExecute(gt_LeaverSupply3, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Leave2_Init () {
    gt_Leave2 = TriggerCreate("gt_Leave2_Func");
    TriggerEnable(gt_Leave2, false);
    TriggerAddEventTimePeriodic(gt_Leave2, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leaver Supply
//--------------------------------------------------------------------------------------------------
bool gt_LeaverSupply_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("CreepTumorBurrowed", c_playerAny, RegionFromId(18), UnitFilter(0, 0, 0, 0), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_smiley1group, UnitGroupLoopCurrent());
        gv_smiley1 = UnitGroupCount(gv_smiley1group, c_unitCountAlive);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("CreepTumorBurrowed", c_playerAny, RegionFromId(19), UnitFilter(0, 0, 0, 0), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_smiley2group, UnitGroupLoopCurrent());
        gv_smiley2 = UnitGroupCount(gv_smiley2group, c_unitCountAlive);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    PlayerGroupLoopBegin(gv_team1);
    while (!PlayerGroupLoopDone()) {
        if ((gv_smiley1 == 3) && (PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropSuppliesLimit, c_playerPropOperSetTo, 120);
        }
        else {
            if ((gv_smiley1 == 2) && (PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
                PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropSuppliesLimit, c_playerPropOperSetTo, 180);
            }
            else {
                if ((gv_smiley1 == 1) && (PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
                    PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropSuppliesLimit, c_playerPropOperSetTo, 360);
                }
                else {
                }
            }
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(gv_team2);
    while (!PlayerGroupLoopDone()) {
        if ((gv_smiley2 == 3) && (PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropSuppliesLimit, c_playerPropOperSetTo, 120);
        }
        else {
            if ((gv_smiley2 == 2) && (PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
                PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropSuppliesLimit, c_playerPropOperSetTo, 180);
            }
            else {
                if ((gv_smiley2 == 1) && (PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
                    PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropSuppliesLimit, c_playerPropOperSetTo, 360);
                }
                else {
                }
            }
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeaverSupply_Init () {
    gt_LeaverSupply = TriggerCreate("gt_LeaverSupply_Func");
    TriggerEnable(gt_LeaverSupply, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leaver Supply 2
//--------------------------------------------------------------------------------------------------
bool gt_LeaverSupply2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_team1);
    while (!PlayerGroupLoopDone()) {
        if ((gv_smiley1 == 3) && (PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropSuppliesLimit, c_playerPropOperSetTo, 120);
        }
        else {
            if ((gv_smiley1 == 2) && (PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
                PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropSuppliesLimit, c_playerPropOperSetTo, 180);
            }
            else {
                if ((gv_smiley1 == 1) && (PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
                    PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropSuppliesLimit, c_playerPropOperSetTo, 360);
                }
                else {
                }
            }
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(gv_team2);
    while (!PlayerGroupLoopDone()) {
        if ((gv_smiley2 == 3) && (PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropSuppliesLimit, c_playerPropOperSetTo, 120);
        }
        else {
            if ((gv_smiley2 == 2) && (PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
                PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropSuppliesLimit, c_playerPropOperSetTo, 180);
            }
            else {
                if ((gv_smiley2 == 1) && (PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
                    PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropSuppliesLimit, c_playerPropOperSetTo, 360);
                }
                else {
                }
            }
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeaverSupply2_Init () {
    gt_LeaverSupply2 = TriggerCreate("gt_LeaverSupply2_Func");
    TriggerAddEventTimeElapsed(gt_LeaverSupply2, 6.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leaver Supply 3
//--------------------------------------------------------------------------------------------------
bool gt_LeaverSupply3_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("CreepTumorBurrowed", c_playerAny, RegionFromId(18), UnitFilter(0, 0, 0, 0), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_smiley1group, UnitGroupLoopCurrent());
        gv_smiley1 = UnitGroupCount(gv_smiley1group, c_unitCountAlive);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("CreepTumorBurrowed", c_playerAny, RegionFromId(19), UnitFilter(0, 0, 0, 0), 0));
    while (!UnitGroupLoopDone()) {
        UnitGroupAdd(gv_smiley2group, UnitGroupLoopCurrent());
        gv_smiley2 = UnitGroupCount(gv_smiley2group, c_unitCountAlive);
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    PlayerGroupLoopBegin(gv_team1);
    while (!PlayerGroupLoopDone()) {
        if ((gv_smiley1 == 3) && (PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropSuppliesLimit, c_playerPropOperSetTo, 80);
        }
        else {
            if ((gv_smiley1 == 2) && (PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
                PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropSuppliesLimit, c_playerPropOperSetTo, 120);
            }
            else {
                if ((gv_smiley1 == 1) && (PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
                    PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropSuppliesLimit, c_playerPropOperSetTo, 240);
                }
                else {
                }
            }
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(gv_team2);
    while (!PlayerGroupLoopDone()) {
        if ((gv_smiley2 == 3) && (PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropSuppliesLimit, c_playerPropOperSetTo, 80);
        }
        else {
            if ((gv_smiley2 == 2) && (PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
                PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropSuppliesLimit, c_playerPropOperSetTo, 120);
            }
            else {
                if ((gv_smiley2 == 1) && (PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
                    PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropSuppliesLimit, c_playerPropOperSetTo, 240);
                }
                else {
                }
            }
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeaverSupply3_Init () {
    gt_LeaverSupply3 = TriggerCreate("gt_LeaverSupply3_Func");
    TriggerEnable(gt_LeaverSupply3, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leaver Supply 4
//--------------------------------------------------------------------------------------------------
bool gt_LeaverSupply4_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_team1);
    while (!PlayerGroupLoopDone()) {
        if ((gv_smiley1 == 3) && (PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropSuppliesLimit, c_playerPropOperSetTo, 80);
        }
        else {
            if ((gv_smiley1 == 2) && (PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
                PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropSuppliesLimit, c_playerPropOperSetTo, 120);
            }
            else {
                if ((gv_smiley1 == 1) && (PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
                    PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropSuppliesLimit, c_playerPropOperSetTo, 240);
                }
                else {
                }
            }
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(gv_team2);
    while (!PlayerGroupLoopDone()) {
        if ((gv_smiley2 == 3) && (PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropSuppliesLimit, c_playerPropOperSetTo, 80);
        }
        else {
            if ((gv_smiley2 == 2) && (PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
                PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropSuppliesLimit, c_playerPropOperSetTo, 120);
            }
            else {
                if ((gv_smiley2 == 1) && (PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
                    PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropSuppliesLimit, c_playerPropOperSetTo, 240);
                }
                else {
                }
            }
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeaverSupply4_Init () {
    gt_LeaverSupply4 = TriggerCreate("gt_LeaverSupply4_Func");
    TriggerEnable(gt_LeaverSupply4, false);
    TriggerAddEventTimeElapsed(gt_LeaverSupply4, 10.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leaver units
//--------------------------------------------------------------------------------------------------
bool gt_Leaverunits_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    IntLoopBegin(1, 8);
    while (!IntLoopDone()) {
        if ((PlayerStatus(IntLoopCurrent()) == c_playerStatusLeft)) {
            if ((PlayerGroupHasPlayer(gv_team1, IntLoopCurrent()) == true)) {
                gv_player[IntLoopCurrent()] = true;
                gv_totalIncome[IntLoopCurrent()] = 0;
                libNtve_gf_SetDialogItemText(gv_labelIncome[IntLoopCurrent()], IntToText(gv_totalIncome[IntLoopCurrent()]), PlayerGroupAll());
                Wait(0.6, c_timeGame);
                PlayerGroupRemove(gv_team1, IntLoopCurrent());
                PlayerModifyPropertyInt(IntLoopCurrent(), c_playerPropSuppliesLimit, c_playerPropOperSetTo, 0);
                if ((gv_smiley1 != 0)) {
                    UnitGroupLoopBegin(UnitGroup(null, IntLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                    while (!UnitGroupLoopDone()) {
                        UnitSetOwner(UnitGroupLoopCurrent(), PlayerGroupPlayer(gv_team1, RandomInt(1, PlayerGroupCount(gv_team1))), true);
                        UnitGroupLoopStep();
                    }
                    UnitGroupLoopEnd();
                }
                else {
                }
            }
            else {
                if ((PlayerGroupHasPlayer(gv_team2, IntLoopCurrent()) == true)) {
                    gv_player[IntLoopCurrent()] = true;
                    gv_totalIncome[IntLoopCurrent()] = 0;
                    libNtve_gf_SetDialogItemText(gv_labelIncome[IntLoopCurrent()], IntToText(gv_totalIncome[IntLoopCurrent()]), PlayerGroupAll());
                    Wait(0.6, c_timeGame);
                    PlayerGroupRemove(gv_team2, IntLoopCurrent());
                    PlayerModifyPropertyInt(IntLoopCurrent(), c_playerPropSuppliesLimit, c_playerPropOperSetTo, 0);
                    if ((gv_smiley2 != 0)) {
                        UnitGroupLoopBegin(UnitGroup(null, IntLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                        while (!UnitGroupLoopDone()) {
                            UnitSetOwner(UnitGroupLoopCurrent(), PlayerGroupPlayer(gv_team2, RandomInt(1, PlayerGroupCount(gv_team2))), true);
                            UnitGroupLoopStep();
                        }
                        UnitGroupLoopEnd();
                    }
                    else {
                    }
                }
                else {
                }
            }
        }
        else {
        }
        IntLoopStep();
    }
    IntLoopEnd();
    TriggerExecute(gt_AddingtoIncomeleaver, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Leaverunits_Init () {
    gt_Leaverunits = TriggerCreate("gt_Leaverunits_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zergling bounty variable
//--------------------------------------------------------------------------------------------------
bool gt_Zerglingbountyvariable_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Zergling"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitDamageSourceUnit()) == EventUnitDamageSourcePlayer()))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != EventUnitDamageSourcePlayer()))) {
            return false;
        }

        if (!((EventUnitDamageSourcePlayer() <= 8))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_zerglingbounty[EventUnitDamageSourcePlayer()]=gv_zerglingbounty[EventUnitDamageSourcePlayer()] + 1;
    if ((gv_zerglingbounty[EventUnitDamageSourcePlayer()] == 2)) {
        PlayerModifyPropertyInt(EventUnitDamageSourcePlayer(), c_playerPropMinerals, c_playerPropOperAdd, 1);
        gv_zerglingbounty[EventUnitDamageSourcePlayer()] = 0;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Zerglingbountyvariable_Init () {
    gt_Zerglingbountyvariable = TriggerCreate("gt_Zerglingbountyvariable_Func");
    TriggerAddEventUnitDied(gt_Zerglingbountyvariable, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Adding to Income Terran
//--------------------------------------------------------------------------------------------------
bool gt_AddingtoIncomeTerran_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnitProgressUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(PlayerGroupActive());
    while (!PlayerGroupLoopDone()) {
        if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            gv_incomeMarine[PlayerGroupLoopCurrent()] = 0;
            gv_incomeReaper[PlayerGroupLoopCurrent()] = 0;
            gv_incomeMaraudor[PlayerGroupLoopCurrent()] = 0;
            gv_incomeGhosts[PlayerGroupLoopCurrent()] = 0;
            gv_incomeMedivac[PlayerGroupLoopCurrent()] = 0;
            gv_incomeTank[PlayerGroupLoopCurrent()] = 0;
            gv_incomeThor[PlayerGroupLoopCurrent()] = 0;
            gv_incomeHellion[PlayerGroupLoopCurrent()] = 0;
            gv_incomeBanshee[PlayerGroupLoopCurrent()] = 0;
            gv_incomeBattlecruiser[PlayerGroupLoopCurrent()] = 0;
            gv_incomeViking[PlayerGroupLoopCurrent()] = 0;
            gv_incomeFirebat[PlayerGroupLoopCurrent()] = 0;
            gv_incomeRaven[PlayerGroupLoopCurrent()] = 0;
            UnitGroupLoopBegin(UnitGroup("Barracks", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_barrack[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeMarine[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_barrack[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("EngineeringBay", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_engineeringBay[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeReaper[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_engineeringBay[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Bunker", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_bunker[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeMaraudor[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_bunker[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("GhostAcademy", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_ghostAcademy[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeGhosts[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_ghostAcademy[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Starport", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_starport[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeMedivac[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_starport[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("SupplyDepot", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_supplyDepot[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeTank[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_supplyDepot[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Armory", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_armory[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeThor[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_armory[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Factory", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_factory[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeHellion[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_factory[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("SensorTower", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_sensor[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeBanshee[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_sensor[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("FusionCore", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_fusion[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeBattlecruiser[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_fusion[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("MissileTurret", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_missileTurret[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeViking[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_missileTurret[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Refinery", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_refinery[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeFirebat[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_refinery[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("PsiIndoctrinator", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_psidisrupter[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeRaven[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_psidisrupter[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            gv_terranIncome[PlayerGroupLoopCurrent()] = ((((gv_incomeMarine[PlayerGroupLoopCurrent()] * 2) + (gv_incomeReaper[PlayerGroupLoopCurrent()] * 3)) + (((gv_incomeMaraudor[PlayerGroupLoopCurrent()] * 4) + (gv_incomeGhosts[PlayerGroupLoopCurrent()] * 6)) + (gv_incomeMedivac[PlayerGroupLoopCurrent()] * 4))) + (((gv_incomeTank[PlayerGroupLoopCurrent()] * 6) + (gv_incomeThor[PlayerGroupLoopCurrent()] * 12)) + ((gv_incomeHellion[PlayerGroupLoopCurrent()] * 4) + (((gv_incomeBanshee[PlayerGroupLoopCurrent()] * 6) + (gv_incomeBattlecruiser[PlayerGroupLoopCurrent()] * 14)) + ((gv_incomeViking[PlayerGroupLoopCurrent()] * 6) + ((gv_incomeFirebat[PlayerGroupLoopCurrent()] * 4) + ((gv_incomeRaven[PlayerGroupLoopCurrent()] * 7) + 0)))))));
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddingtoIncomeTerran_Init () {
    gt_AddingtoIncomeTerran = TriggerCreate("gt_AddingtoIncomeTerran_Func");
    TriggerAddEventUnitConstructProgress(gt_AddingtoIncomeTerran, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Adding to Income Zerg
//--------------------------------------------------------------------------------------------------
bool gt_AddingtoIncomeZerg_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnitProgressUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(PlayerGroupActive());
    while (!PlayerGroupLoopDone()) {
        if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            gv_incomeZergling[PlayerGroupLoopCurrent()] = 0;
            gv_incomeBaneling[PlayerGroupLoopCurrent()] = 0;
            gv_incomeQueen[PlayerGroupLoopCurrent()] = 0;
            gv_incomeRoach[PlayerGroupLoopCurrent()] = 0;
            gv_incomeHydra[PlayerGroupLoopCurrent()] = 0;
            gv_incomeUltra[PlayerGroupLoopCurrent()] = 0;
            gv_incomeMuta[PlayerGroupLoopCurrent()] = 0;
            gv_incomeCorruptor[PlayerGroupLoopCurrent()] = 0;
            gv_incomeBroodlord[PlayerGroupLoopCurrent()] = 0;
            gv_incomeInfestor[PlayerGroupLoopCurrent()] = 0;
            gv_incomeLurker[PlayerGroupLoopCurrent()] = 0;
            UnitGroupLoopBegin(UnitGroup("SpawningPool", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_spawningPool[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeZergling[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_spawningPool[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("BanelingNest", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_banelingNest[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeBaneling[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_banelingNest[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("SpineCrawler", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_spineCrawler[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeQueen[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_spineCrawler[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("RoachWarren", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_roachWarren[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeRoach[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_roachWarren[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("HydraliskDen", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_hydraliskDen[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeHydra[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_hydraliskDen[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("UltraliskCavern", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_ultraliskCavern[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeUltra[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_ultraliskCavern[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Spire", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_spire[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeMuta[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_spire[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("SporeCrawler", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_sporeCrawler[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeCorruptor[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_sporeCrawler[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Spire2", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_greaterSpire[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeBroodlord[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_greaterSpire[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("NydusCanal", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_nydus[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeInfestor[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_nydus[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("LurkerDen", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_lurkerDen[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeLurker[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_lurkerDen[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            gv_zergIncome[PlayerGroupLoopCurrent()] = ((((gv_incomeZergling[PlayerGroupLoopCurrent()] * 2) + (gv_incomeBaneling[PlayerGroupLoopCurrent()] * 3)) + (gv_incomeQueen[PlayerGroupLoopCurrent()] * 6)) + ((gv_incomeRoach[PlayerGroupLoopCurrent()] * 3) + ((gv_incomeHydra[PlayerGroupLoopCurrent()] * 4) + ((gv_incomeMuta[PlayerGroupLoopCurrent()] * 4) + ((gv_incomeCorruptor[PlayerGroupLoopCurrent()] * 6) + ((gv_incomeBroodlord[PlayerGroupLoopCurrent()] * 10) + ((gv_incomeUltra[PlayerGroupLoopCurrent()] * 12) + ((gv_incomeInfestor[PlayerGroupLoopCurrent()] * 6) + (gv_incomeLurker[PlayerGroupLoopCurrent()] * 6)))))))));
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddingtoIncomeZerg_Init () {
    gt_AddingtoIncomeZerg = TriggerCreate("gt_AddingtoIncomeZerg_Func");
    TriggerAddEventUnitConstructProgress(gt_AddingtoIncomeZerg, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Adding to Income Protoss
//--------------------------------------------------------------------------------------------------
bool gt_AddingtoIncomeProtoss_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnitProgressUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(PlayerGroupActive());
    while (!PlayerGroupLoopDone()) {
        if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            gv_incomeZealot[PlayerGroupLoopCurrent()] = 0;
            gv_incomeStalker[PlayerGroupLoopCurrent()] = 0;
            gv_incomeSentry[PlayerGroupLoopCurrent()] = 0;
            gv_incomeDarkTemplar[PlayerGroupLoopCurrent()] = 0;
            gv_incomeImmortal[PlayerGroupLoopCurrent()] = 0;
            gv_incomeArchon[PlayerGroupLoopCurrent()] = 0;
            gv_incomeCollossus[PlayerGroupLoopCurrent()] = 0;
            gv_incomePhoenix[PlayerGroupLoopCurrent()] = 0;
            gv_incomeVoidray[PlayerGroupLoopCurrent()] = 0;
            gv_incomeCarrier[PlayerGroupLoopCurrent()] = 0;
            gv_incomeHighTemplar[PlayerGroupLoopCurrent()] = 0;
            gv_incomeScout[PlayerGroupLoopCurrent()] = 0;
            UnitGroupLoopBegin(UnitGroup("Gateway", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_gateway[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeZealot[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_gateway[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("CyberneticsCore", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_cyberneticCore[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeStalker[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_cyberneticCore[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Forge", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_forge[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeSentry[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_forge[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("DarkShrine", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_darkShrine[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeDarkTemplar[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_darkShrine[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("RoboticsFacility", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_roboticFacility[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeImmortal[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_roboticFacility[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("TemplarArchive", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_templarArchive[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeArchon[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_templarArchive[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("RoboticsBay", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_roboticBay[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeCollossus[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_roboticBay[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Stargate", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_stargate[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomePhoenix[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_stargate[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("TwilightCouncil", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_twilightCouncil[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeVoidray[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_twilightCouncil[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("FleetBeacon", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_fleetBeacon[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeCarrier[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_fleetBeacon[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Assimilator", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_assimilator[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeHighTemplar[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_assimilator[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Obelisk", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_obelisk[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeScout[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_obelisk[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            gv_protossIncome[PlayerGroupLoopCurrent()] = ((((gv_incomeZealot[PlayerGroupLoopCurrent()] * 4) + (gv_incomeStalker[PlayerGroupLoopCurrent()] * 5)) + (gv_incomeSentry[PlayerGroupLoopCurrent()] * 3)) + ((gv_incomeDarkTemplar[PlayerGroupLoopCurrent()] * 5) + ((gv_incomeImmortal[PlayerGroupLoopCurrent()] * 7) + ((gv_incomeArchon[PlayerGroupLoopCurrent()] * 8) + ((gv_incomeCollossus[PlayerGroupLoopCurrent()] * 12) + ((gv_incomeVoidray[PlayerGroupLoopCurrent()] * 9) + ((gv_incomePhoenix[PlayerGroupLoopCurrent()] * 6) + ((gv_incomeCarrier[PlayerGroupLoopCurrent()] * 14) + ((gv_incomeHighTemplar[PlayerGroupLoopCurrent()] * 6) + (gv_incomeScout[PlayerGroupLoopCurrent()] * 6))))))))));
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddingtoIncomeProtoss_Init () {
    gt_AddingtoIncomeProtoss = TriggerCreate("gt_AddingtoIncomeProtoss_Func");
    TriggerAddEventUnitConstructProgress(gt_AddingtoIncomeProtoss, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Adding to Income Terran 2
//--------------------------------------------------------------------------------------------------
bool gt_AddingtoIncomeTerran2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(PlayerGroupActive());
    while (!PlayerGroupLoopDone()) {
        if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            gv_incomeMarine[PlayerGroupLoopCurrent()] = 0;
            gv_incomeReaper[PlayerGroupLoopCurrent()] = 0;
            gv_incomeMaraudor[PlayerGroupLoopCurrent()] = 0;
            gv_incomeGhosts[PlayerGroupLoopCurrent()] = 0;
            gv_incomeMedivac[PlayerGroupLoopCurrent()] = 0;
            gv_incomeTank[PlayerGroupLoopCurrent()] = 0;
            gv_incomeThor[PlayerGroupLoopCurrent()] = 0;
            gv_incomeHellion[PlayerGroupLoopCurrent()] = 0;
            gv_incomeBanshee[PlayerGroupLoopCurrent()] = 0;
            gv_incomeBattlecruiser[PlayerGroupLoopCurrent()] = 0;
            gv_incomeViking[PlayerGroupLoopCurrent()] = 0;
            gv_incomeFirebat[PlayerGroupLoopCurrent()] = 0;
            gv_incomeRaven[PlayerGroupLoopCurrent()] = 0;
            UnitGroupLoopBegin(UnitGroup("Barracks", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_barrack[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeMarine[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_barrack[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("EngineeringBay", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_engineeringBay[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeReaper[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_engineeringBay[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Bunker", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_bunker[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeMaraudor[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_bunker[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("GhostAcademy", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_ghostAcademy[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeGhosts[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_ghostAcademy[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Starport", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_starport[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeMedivac[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_starport[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("SupplyDepot", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_supplyDepot[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeTank[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_supplyDepot[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Armory", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_armory[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeThor[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_armory[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Factory", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_factory[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeHellion[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_factory[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("SensorTower", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_sensor[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeBanshee[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_sensor[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("FusionCore", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_fusion[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeBattlecruiser[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_fusion[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("MissileTurret", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_missileTurret[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeViking[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_missileTurret[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Refinery", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_refinery[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeFirebat[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_refinery[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("PsiIndoctrinator", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_psidisrupter[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeRaven[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_psidisrupter[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            gv_terranIncome[PlayerGroupLoopCurrent()] = ((((gv_incomeMarine[PlayerGroupLoopCurrent()] * 2) + (gv_incomeReaper[PlayerGroupLoopCurrent()] * 3)) + (((gv_incomeMaraudor[PlayerGroupLoopCurrent()] * 4) + (gv_incomeGhosts[PlayerGroupLoopCurrent()] * 6)) + (gv_incomeMedivac[PlayerGroupLoopCurrent()] * 4))) + (((gv_incomeTank[PlayerGroupLoopCurrent()] * 6) + (gv_incomeThor[PlayerGroupLoopCurrent()] * 12)) + ((gv_incomeHellion[PlayerGroupLoopCurrent()] * 4) + (((gv_incomeBanshee[PlayerGroupLoopCurrent()] * 6) + (gv_incomeBattlecruiser[PlayerGroupLoopCurrent()] * 14)) + ((gv_incomeViking[PlayerGroupLoopCurrent()] * 6) + ((gv_incomeFirebat[PlayerGroupLoopCurrent()] * 4) + ((gv_incomeRaven[PlayerGroupLoopCurrent()] * 7) + 0)))))));
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddingtoIncomeTerran2_Init () {
    gt_AddingtoIncomeTerran2 = TriggerCreate("gt_AddingtoIncomeTerran2_Func");
    TriggerAddEventUnitDied(gt_AddingtoIncomeTerran2, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Adding to Income Zerg 2
//--------------------------------------------------------------------------------------------------
bool gt_AddingtoIncomeZerg2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(PlayerGroupActive());
    while (!PlayerGroupLoopDone()) {
        if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            gv_incomeZergling[PlayerGroupLoopCurrent()] = 0;
            gv_incomeBaneling[PlayerGroupLoopCurrent()] = 0;
            gv_incomeQueen[PlayerGroupLoopCurrent()] = 0;
            gv_incomeRoach[PlayerGroupLoopCurrent()] = 0;
            gv_incomeHydra[PlayerGroupLoopCurrent()] = 0;
            gv_incomeUltra[PlayerGroupLoopCurrent()] = 0;
            gv_incomeMuta[PlayerGroupLoopCurrent()] = 0;
            gv_incomeCorruptor[PlayerGroupLoopCurrent()] = 0;
            gv_incomeBroodlord[PlayerGroupLoopCurrent()] = 0;
            gv_incomeInfestor[PlayerGroupLoopCurrent()] = 0;
            gv_incomeLurker[PlayerGroupLoopCurrent()] = 0;
            UnitGroupLoopBegin(UnitGroup("SpawningPool", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_spawningPool[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeZergling[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_spawningPool[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("BanelingNest", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_banelingNest[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeBaneling[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_banelingNest[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("SpineCrawler", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_spineCrawler[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeQueen[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_spineCrawler[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("RoachWarren", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_roachWarren[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeRoach[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_roachWarren[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("HydraliskDen", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_hydraliskDen[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeHydra[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_hydraliskDen[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("UltraliskCavern", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_ultraliskCavern[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeUltra[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_ultraliskCavern[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Spire", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_spire[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeMuta[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_spire[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("SporeCrawler", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_sporeCrawler[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeCorruptor[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_sporeCrawler[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Spire2", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_greaterSpire[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeBroodlord[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_greaterSpire[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("NydusCanal", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_nydus[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeInfestor[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_nydus[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("LurkerDen", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_lurkerDen[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeLurker[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_lurkerDen[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            gv_zergIncome[PlayerGroupLoopCurrent()] = ((((gv_incomeZergling[PlayerGroupLoopCurrent()] * 2) + (gv_incomeBaneling[PlayerGroupLoopCurrent()] * 3)) + (gv_incomeQueen[PlayerGroupLoopCurrent()] * 6)) + ((gv_incomeRoach[PlayerGroupLoopCurrent()] * 3) + ((gv_incomeHydra[PlayerGroupLoopCurrent()] * 4) + ((gv_incomeMuta[PlayerGroupLoopCurrent()] * 4) + ((gv_incomeCorruptor[PlayerGroupLoopCurrent()] * 6) + ((gv_incomeBroodlord[PlayerGroupLoopCurrent()] * 10) + ((gv_incomeUltra[PlayerGroupLoopCurrent()] * 12) + ((gv_incomeInfestor[PlayerGroupLoopCurrent()] * 6) + (gv_incomeLurker[PlayerGroupLoopCurrent()] * 6)))))))));
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddingtoIncomeZerg2_Init () {
    gt_AddingtoIncomeZerg2 = TriggerCreate("gt_AddingtoIncomeZerg2_Func");
    TriggerAddEventUnitDied(gt_AddingtoIncomeZerg2, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Adding to Income Protoss 2
//--------------------------------------------------------------------------------------------------
bool gt_AddingtoIncomeProtoss2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(PlayerGroupActive());
    while (!PlayerGroupLoopDone()) {
        if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            gv_incomeZealot[PlayerGroupLoopCurrent()] = 0;
            gv_incomeStalker[PlayerGroupLoopCurrent()] = 0;
            gv_incomeSentry[PlayerGroupLoopCurrent()] = 0;
            gv_incomeDarkTemplar[PlayerGroupLoopCurrent()] = 0;
            gv_incomeImmortal[PlayerGroupLoopCurrent()] = 0;
            gv_incomeArchon[PlayerGroupLoopCurrent()] = 0;
            gv_incomeCollossus[PlayerGroupLoopCurrent()] = 0;
            gv_incomePhoenix[PlayerGroupLoopCurrent()] = 0;
            gv_incomeVoidray[PlayerGroupLoopCurrent()] = 0;
            gv_incomeCarrier[PlayerGroupLoopCurrent()] = 0;
            gv_incomeHighTemplar[PlayerGroupLoopCurrent()] = 0;
            gv_incomeScout[PlayerGroupLoopCurrent()] = 0;
            UnitGroupLoopBegin(UnitGroup("Gateway", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_gateway[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeZealot[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_gateway[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("CyberneticsCore", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_cyberneticCore[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeStalker[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_cyberneticCore[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Forge", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_forge[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeSentry[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_forge[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("DarkShrine", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_darkShrine[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeDarkTemplar[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_darkShrine[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("RoboticsFacility", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_roboticFacility[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeImmortal[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_roboticFacility[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("TemplarArchive", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_templarArchive[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeArchon[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_templarArchive[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("RoboticsBay", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_roboticBay[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeCollossus[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_roboticBay[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Stargate", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_stargate[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomePhoenix[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_stargate[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("TwilightCouncil", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_twilightCouncil[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeVoidray[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_twilightCouncil[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("FleetBeacon", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_fleetBeacon[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeCarrier[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_fleetBeacon[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Assimilator", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_assimilator[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeHighTemplar[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_assimilator[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Obelisk", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_obelisk[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeScout[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_obelisk[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            gv_protossIncome[PlayerGroupLoopCurrent()] = ((((gv_incomeZealot[PlayerGroupLoopCurrent()] * 4) + (gv_incomeStalker[PlayerGroupLoopCurrent()] * 5)) + (gv_incomeSentry[PlayerGroupLoopCurrent()] * 3)) + ((gv_incomeDarkTemplar[PlayerGroupLoopCurrent()] * 5) + ((gv_incomeImmortal[PlayerGroupLoopCurrent()] * 7) + ((gv_incomeArchon[PlayerGroupLoopCurrent()] * 8) + ((gv_incomeCollossus[PlayerGroupLoopCurrent()] * 12) + ((gv_incomeVoidray[PlayerGroupLoopCurrent()] * 10) + ((gv_incomePhoenix[PlayerGroupLoopCurrent()] * 6) + ((gv_incomeCarrier[PlayerGroupLoopCurrent()] * 14) + ((gv_incomeHighTemplar[PlayerGroupLoopCurrent()] * 6) + (gv_incomeScout[PlayerGroupLoopCurrent()] * 6))))))))));
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddingtoIncomeProtoss2_Init () {
    gt_AddingtoIncomeProtoss2 = TriggerCreate("gt_AddingtoIncomeProtoss2_Func");
    TriggerAddEventUnitDied(gt_AddingtoIncomeProtoss2, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Adding to Income  leaver
//--------------------------------------------------------------------------------------------------
bool gt_AddingtoIncomeleaver_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(PlayerGroupActive());
    while (!PlayerGroupLoopDone()) {
        if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            gv_incomeMarine[PlayerGroupLoopCurrent()] = 0;
            gv_incomeReaper[PlayerGroupLoopCurrent()] = 0;
            gv_incomeMaraudor[PlayerGroupLoopCurrent()] = 0;
            gv_incomeGhosts[PlayerGroupLoopCurrent()] = 0;
            gv_incomeMedivac[PlayerGroupLoopCurrent()] = 0;
            gv_incomeTank[PlayerGroupLoopCurrent()] = 0;
            gv_incomeThor[PlayerGroupLoopCurrent()] = 0;
            gv_incomeHellion[PlayerGroupLoopCurrent()] = 0;
            gv_incomeBanshee[PlayerGroupLoopCurrent()] = 0;
            gv_incomeBattlecruiser[PlayerGroupLoopCurrent()] = 0;
            gv_incomeViking[PlayerGroupLoopCurrent()] = 0;
            gv_incomeFirebat[PlayerGroupLoopCurrent()] = 0;
            gv_incomeRaven[PlayerGroupLoopCurrent()] = 0;
            UnitGroupLoopBegin(UnitGroup("Barracks", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_barrack[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeMarine[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_barrack[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("EngineeringBay", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_engineeringBay[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeReaper[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_engineeringBay[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Bunker", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_bunker[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeMaraudor[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_bunker[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("GhostAcademy", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_ghostAcademy[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeGhosts[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_ghostAcademy[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Starport", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_starport[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeMedivac[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_starport[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("SupplyDepot", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_supplyDepot[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeTank[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_supplyDepot[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Armory", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_armory[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeThor[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_armory[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Factory", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_factory[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeHellion[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_factory[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("SensorTower", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_sensor[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeBanshee[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_sensor[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("FusionCore", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_fusion[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeBattlecruiser[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_fusion[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("MissileTurret", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_missileTurret[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeViking[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_missileTurret[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Refinery", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_refinery[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeFirebat[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_refinery[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("PsiIndoctrinator", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_psidisrupter[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeRaven[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_psidisrupter[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            gv_terranIncome[PlayerGroupLoopCurrent()] = ((((gv_incomeMarine[PlayerGroupLoopCurrent()] * 2) + (gv_incomeReaper[PlayerGroupLoopCurrent()] * 3)) + (((gv_incomeMaraudor[PlayerGroupLoopCurrent()] * 4) + (gv_incomeGhosts[PlayerGroupLoopCurrent()] * 6)) + (gv_incomeMedivac[PlayerGroupLoopCurrent()] * 4))) + (((gv_incomeTank[PlayerGroupLoopCurrent()] * 6) + (gv_incomeThor[PlayerGroupLoopCurrent()] * 12)) + ((gv_incomeHellion[PlayerGroupLoopCurrent()] * 4) + (((gv_incomeBanshee[PlayerGroupLoopCurrent()] * 6) + (gv_incomeBattlecruiser[PlayerGroupLoopCurrent()] * 14)) + ((gv_incomeViking[PlayerGroupLoopCurrent()] * 6) + ((gv_incomeFirebat[PlayerGroupLoopCurrent()] * 4) + ((gv_incomeRaven[PlayerGroupLoopCurrent()] * 7) + ((gv_incomePylon[PlayerGroupLoopCurrent()] * 16) + ((gv_incomePylon2[PlayerGroupLoopCurrent()] * 36) + ((gv_incomePylon3[PlayerGroupLoopCurrent()] * 64) + ((gv_incomePylon4[PlayerGroupLoopCurrent()] * 104) + (gv_incomePylon5[PlayerGroupLoopCurrent()] * 156))))))))))));
            gv_incomeZergling[PlayerGroupLoopCurrent()] = 0;
            gv_incomeBaneling[PlayerGroupLoopCurrent()] = 0;
            gv_incomeQueen[PlayerGroupLoopCurrent()] = 0;
            gv_incomeRoach[PlayerGroupLoopCurrent()] = 0;
            gv_incomeHydra[PlayerGroupLoopCurrent()] = 0;
            gv_incomeUltra[PlayerGroupLoopCurrent()] = 0;
            gv_incomeMuta[PlayerGroupLoopCurrent()] = 0;
            gv_incomeCorruptor[PlayerGroupLoopCurrent()] = 0;
            gv_incomeBroodlord[PlayerGroupLoopCurrent()] = 0;
            gv_incomeInfestor[PlayerGroupLoopCurrent()] = 0;
            gv_incomeLurker[PlayerGroupLoopCurrent()] = 0;
            UnitGroupLoopBegin(UnitGroup("SpawningPool", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_spawningPool[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeZergling[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_spawningPool[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("BanelingNest", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_banelingNest[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeBaneling[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_banelingNest[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("SpineCrawler", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_spineCrawler[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeQueen[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_spineCrawler[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("RoachWarren", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_roachWarren[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeRoach[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_roachWarren[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("HydraliskDen", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_hydraliskDen[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeHydra[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_hydraliskDen[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("UltraliskCavern", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_ultraliskCavern[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeUltra[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_ultraliskCavern[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Spire", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_spire[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeMuta[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_spire[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("SporeCrawler", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_sporeCrawler[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeCorruptor[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_sporeCrawler[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Spire2", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_greaterSpire[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeBroodlord[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_greaterSpire[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("NydusCanal", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_nydus[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeInfestor[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_nydus[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("LurkerDen", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_lurkerDen[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeLurker[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_lurkerDen[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            gv_zergIncome[PlayerGroupLoopCurrent()] = ((((gv_incomeZergling[PlayerGroupLoopCurrent()] * 2) + (gv_incomeBaneling[PlayerGroupLoopCurrent()] * 3)) + (gv_incomeQueen[PlayerGroupLoopCurrent()] * 6)) + ((gv_incomeRoach[PlayerGroupLoopCurrent()] * 3) + ((gv_incomeHydra[PlayerGroupLoopCurrent()] * 4) + ((gv_incomeMuta[PlayerGroupLoopCurrent()] * 4) + ((gv_incomeCorruptor[PlayerGroupLoopCurrent()] * 6) + ((gv_incomeBroodlord[PlayerGroupLoopCurrent()] * 10) + ((gv_incomeUltra[PlayerGroupLoopCurrent()] * 12) + ((gv_incomeInfestor[PlayerGroupLoopCurrent()] * 6) + (gv_incomeLurker[PlayerGroupLoopCurrent()] * 6)))))))));
            gv_incomeZealot[PlayerGroupLoopCurrent()] = 0;
            gv_incomeStalker[PlayerGroupLoopCurrent()] = 0;
            gv_incomeSentry[PlayerGroupLoopCurrent()] = 0;
            gv_incomeDarkTemplar[PlayerGroupLoopCurrent()] = 0;
            gv_incomeImmortal[PlayerGroupLoopCurrent()] = 0;
            gv_incomeArchon[PlayerGroupLoopCurrent()] = 0;
            gv_incomeCollossus[PlayerGroupLoopCurrent()] = 0;
            gv_incomePhoenix[PlayerGroupLoopCurrent()] = 0;
            gv_incomeVoidray[PlayerGroupLoopCurrent()] = 0;
            gv_incomeCarrier[PlayerGroupLoopCurrent()] = 0;
            gv_incomeHighTemplar[PlayerGroupLoopCurrent()] = 0;
            gv_incomeScout[PlayerGroupLoopCurrent()] = 0;
            UnitGroupLoopBegin(UnitGroup("Gateway", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_gateway[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeZealot[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_gateway[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("CyberneticsCore", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_cyberneticCore[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeStalker[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_cyberneticCore[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Forge", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_forge[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeSentry[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_forge[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("DarkShrine", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_darkShrine[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeDarkTemplar[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_darkShrine[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("RoboticsFacility", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_roboticFacility[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeImmortal[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_roboticFacility[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("TemplarArchive", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_templarArchive[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeArchon[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_templarArchive[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("RoboticsBay", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_roboticBay[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeCollossus[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_roboticBay[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Stargate", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_stargate[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomePhoenix[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_stargate[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("TwilightCouncil", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_twilightCouncil[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeVoidray[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_twilightCouncil[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("FleetBeacon", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_fleetBeacon[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeCarrier[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_fleetBeacon[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Assimilator", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_assimilator[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeHighTemplar[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_assimilator[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Obelisk", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_obelisk[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomeScout[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_obelisk[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            gv_incomePylon[PlayerGroupLoopCurrent()] = 0;
            gv_incomePylon2[PlayerGroupLoopCurrent()] = 0;
            gv_incomePylon3[PlayerGroupLoopCurrent()] = 0;
            gv_incomePylon4[PlayerGroupLoopCurrent()] = 0;
            gv_incomePylon5[PlayerGroupLoopCurrent()] = 0;
            UnitGroupLoopBegin(UnitGroup("Pylon", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_pylon1[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomePylon[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_pylon1[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Pylon2", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_pylon2[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomePylon2[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_pylon2[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Pylon3", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_pylon3[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomePylon3[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_pylon3[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Pylon4", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_pylon4[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomePylon4[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_pylon4[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Pylon5", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_pylon5[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomePylon5[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_pylon5[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            gv_protossIncome[PlayerGroupLoopCurrent()] = ((((gv_incomeZealot[PlayerGroupLoopCurrent()] * 4) + (gv_incomeStalker[PlayerGroupLoopCurrent()] * 5)) + (gv_incomeSentry[PlayerGroupLoopCurrent()] * 3)) + ((gv_incomeDarkTemplar[PlayerGroupLoopCurrent()] * 5) + ((gv_incomeImmortal[PlayerGroupLoopCurrent()] * 7) + ((gv_incomeArchon[PlayerGroupLoopCurrent()] * 8) + ((gv_incomeCollossus[PlayerGroupLoopCurrent()] * 12) + ((gv_incomeVoidray[PlayerGroupLoopCurrent()] * 10) + ((gv_incomePhoenix[PlayerGroupLoopCurrent()] * 6) + ((gv_incomeCarrier[PlayerGroupLoopCurrent()] * 14) + ((gv_incomeHighTemplar[PlayerGroupLoopCurrent()] * 6) + (gv_incomeScout[PlayerGroupLoopCurrent()] * 6))))))))));
            gv_totalIncome[PlayerGroupLoopCurrent()] = ((10 + gv_zergIncome[PlayerGroupLoopCurrent()]) + (gv_terranIncome[PlayerGroupLoopCurrent()] + (gv_protossIncome[PlayerGroupLoopCurrent()] + gv_pylonIncome[PlayerGroupLoopCurrent()])));
            libNtve_gf_SetDialogItemText(gv_labelIncome[PlayerGroupLoopCurrent()], IntToText(gv_totalIncome[PlayerGroupLoopCurrent()]), PlayerGroupAll());
            gv_totalIncome2[PlayerGroupLoopCurrent()] = IntToFixed(gv_totalIncome[PlayerGroupLoopCurrent()]);
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddingtoIncomeleaver_Init () {
    gt_AddingtoIncomeleaver = TriggerCreate("gt_AddingtoIncomeleaver_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Adding Pylon
//--------------------------------------------------------------------------------------------------
bool gt_AddingPylon_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnitProgressUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitProgressUnit()) == "Pylon") || (UnitGetType(EventUnitProgressUnit()) == "Pylon2") || (UnitGetType(EventUnitProgressUnit()) == "Pylon3") || (UnitGetType(EventUnitProgressUnit()) == "Pylon4") || (UnitGetType(EventUnitProgressUnit()) == "Pylon5")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(PlayerGroupActive());
    while (!PlayerGroupLoopDone()) {
        if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            gv_incomePylon[PlayerGroupLoopCurrent()] = 0;
            gv_incomePylon2[PlayerGroupLoopCurrent()] = 0;
            gv_incomePylon3[PlayerGroupLoopCurrent()] = 0;
            gv_incomePylon4[PlayerGroupLoopCurrent()] = 0;
            gv_incomePylon5[PlayerGroupLoopCurrent()] = 0;
            UnitGroupLoopBegin(UnitGroup("Pylon", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_pylon1[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomePylon[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_pylon1[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Pylon2", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_pylon2[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomePylon2[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_pylon2[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Pylon3", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_pylon3[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomePylon3[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_pylon3[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Pylon4", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_pylon4[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomePylon4[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_pylon4[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Pylon5", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_pylon5[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomePylon5[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_pylon5[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            gv_pylonIncome[PlayerGroupLoopCurrent()] = ((gv_incomePylon[PlayerGroupLoopCurrent()] * 16) + ((gv_incomePylon2[PlayerGroupLoopCurrent()] * 32) + ((gv_incomePylon3[PlayerGroupLoopCurrent()] * 64) + ((gv_incomePylon4[PlayerGroupLoopCurrent()] * 128) + (gv_incomePylon5[PlayerGroupLoopCurrent()] * 256)))));
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddingPylon_Init () {
    gt_AddingPylon = TriggerCreate("gt_AddingPylon_Func");
    TriggerAddEventUnitConstructProgress(gt_AddingPylon, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Adding Pylon 2
//--------------------------------------------------------------------------------------------------
bool gt_AddingPylon2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "Pylon") || (UnitGetType(EventUnit()) == "Pylon2") || (UnitGetType(EventUnit()) == "Pylon3") || (UnitGetType(EventUnit()) == "Pylon4") || (UnitGetType(EventUnit()) == "Pylon5")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(PlayerGroupActive());
    while (!PlayerGroupLoopDone()) {
        if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            gv_incomePylon[PlayerGroupLoopCurrent()] = 0;
            gv_incomePylon2[PlayerGroupLoopCurrent()] = 0;
            gv_incomePylon3[PlayerGroupLoopCurrent()] = 0;
            gv_incomePylon4[PlayerGroupLoopCurrent()] = 0;
            gv_incomePylon5[PlayerGroupLoopCurrent()] = 0;
            UnitGroupLoopBegin(UnitGroup("Pylon", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_pylon1[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomePylon[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_pylon1[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Pylon2", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_pylon2[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomePylon2[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_pylon2[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Pylon3", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_pylon3[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomePylon3[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_pylon3[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Pylon4", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_pylon4[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomePylon4[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_pylon4[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Pylon5", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_pylon5[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomePylon5[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_pylon5[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            gv_pylonIncome[PlayerGroupLoopCurrent()] = ((gv_incomePylon[PlayerGroupLoopCurrent()] * 16) + ((gv_incomePylon2[PlayerGroupLoopCurrent()] * 32) + ((gv_incomePylon3[PlayerGroupLoopCurrent()] * 64) + ((gv_incomePylon4[PlayerGroupLoopCurrent()] * 128) + (gv_incomePylon5[PlayerGroupLoopCurrent()] * 256)))));
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddingPylon2_Init () {
    gt_AddingPylon2 = TriggerCreate("gt_AddingPylon2_Func");
    TriggerAddEventUnitDied(gt_AddingPylon2, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pylon upgrading1
//--------------------------------------------------------------------------------------------------
bool gt_Pylonupgrading1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(PlayerGroupActive());
    while (!PlayerGroupLoopDone()) {
        if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            gv_incomePylon[PlayerGroupLoopCurrent()] = 0;
            gv_incomePylon2[PlayerGroupLoopCurrent()] = 0;
            gv_incomePylon3[PlayerGroupLoopCurrent()] = 0;
            gv_incomePylon4[PlayerGroupLoopCurrent()] = 0;
            gv_incomePylon5[PlayerGroupLoopCurrent()] = 0;
            UnitGroupLoopBegin(UnitGroup("Pylon", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_pylon1[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomePylon[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_pylon1[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Pylon2", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_pylon2[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomePylon2[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_pylon2[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Pylon3", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_pylon3[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomePylon3[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_pylon3[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Pylon4", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_pylon4[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomePylon4[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_pylon4[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Pylon5", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_pylon5[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomePylon5[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_pylon5[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            gv_pylonIncome[PlayerGroupLoopCurrent()] = ((gv_incomePylon[PlayerGroupLoopCurrent()] * 16) + ((gv_incomePylon2[PlayerGroupLoopCurrent()] * 32) + ((gv_incomePylon3[PlayerGroupLoopCurrent()] * 64) + ((gv_incomePylon4[PlayerGroupLoopCurrent()] * 128) + (gv_incomePylon5[PlayerGroupLoopCurrent()] * 256)))));
            gv_totalIncome[PlayerGroupLoopCurrent()] = ((10 + gv_zergIncome[PlayerGroupLoopCurrent()]) + (gv_terranIncome[PlayerGroupLoopCurrent()] + (gv_protossIncome[PlayerGroupLoopCurrent()] + gv_pylonIncome[PlayerGroupLoopCurrent()])));
            libNtve_gf_SetDialogItemText(gv_labelIncome[PlayerGroupLoopCurrent()], IntToText(gv_totalIncome[PlayerGroupLoopCurrent()]), PlayerGroupAll());
            gv_totalIncome2[PlayerGroupLoopCurrent()] = IntToFixed(gv_totalIncome[PlayerGroupLoopCurrent()]);
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Pylonupgrading1_Init () {
    gt_Pylonupgrading1 = TriggerCreate("gt_Pylonupgrading1_Func");
    TriggerAddEventUnitAbility(gt_Pylonupgrading1, null, AbilityCommand("UpgradeToGreaterSpire3", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pylon upgrading2
//--------------------------------------------------------------------------------------------------
bool gt_Pylonupgrading2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(PlayerGroupActive());
    while (!PlayerGroupLoopDone()) {
        if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            gv_incomePylon[PlayerGroupLoopCurrent()] = 0;
            gv_incomePylon2[PlayerGroupLoopCurrent()] = 0;
            gv_incomePylon3[PlayerGroupLoopCurrent()] = 0;
            gv_incomePylon4[PlayerGroupLoopCurrent()] = 0;
            gv_incomePylon5[PlayerGroupLoopCurrent()] = 0;
            UnitGroupLoopBegin(UnitGroup("Pylon", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_pylon1[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomePylon[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_pylon1[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Pylon2", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_pylon2[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomePylon2[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_pylon2[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Pylon3", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_pylon3[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomePylon3[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_pylon3[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Pylon4", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_pylon4[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomePylon4[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_pylon4[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Pylon5", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_pylon5[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomePylon5[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_pylon5[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            gv_pylonIncome[PlayerGroupLoopCurrent()] = ((gv_incomePylon[PlayerGroupLoopCurrent()] * 16) + ((gv_incomePylon2[PlayerGroupLoopCurrent()] * 32) + ((gv_incomePylon3[PlayerGroupLoopCurrent()] * 64) + ((gv_incomePylon4[PlayerGroupLoopCurrent()] * 128) + (gv_incomePylon5[PlayerGroupLoopCurrent()] * 256)))));
            gv_totalIncome[PlayerGroupLoopCurrent()] = ((10 + gv_zergIncome[PlayerGroupLoopCurrent()]) + (gv_terranIncome[PlayerGroupLoopCurrent()] + (gv_protossIncome[PlayerGroupLoopCurrent()] + gv_pylonIncome[PlayerGroupLoopCurrent()])));
            libNtve_gf_SetDialogItemText(gv_labelIncome[PlayerGroupLoopCurrent()], IntToText(gv_totalIncome[PlayerGroupLoopCurrent()]), PlayerGroupAll());
            gv_totalIncome2[PlayerGroupLoopCurrent()] = IntToFixed(gv_totalIncome[PlayerGroupLoopCurrent()]);
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Pylonupgrading2_Init () {
    gt_Pylonupgrading2 = TriggerCreate("gt_Pylonupgrading2_Func");
    TriggerAddEventUnitAbility(gt_Pylonupgrading2, null, AbilityCommand("UpgradeToGreaterSpire32", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pylon upgrading3
//--------------------------------------------------------------------------------------------------
bool gt_Pylonupgrading3_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(PlayerGroupActive());
    while (!PlayerGroupLoopDone()) {
        if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            gv_incomePylon[PlayerGroupLoopCurrent()] = 0;
            gv_incomePylon2[PlayerGroupLoopCurrent()] = 0;
            gv_incomePylon3[PlayerGroupLoopCurrent()] = 0;
            gv_incomePylon4[PlayerGroupLoopCurrent()] = 0;
            gv_incomePylon5[PlayerGroupLoopCurrent()] = 0;
            UnitGroupLoopBegin(UnitGroup("Pylon", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_pylon1[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomePylon[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_pylon1[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Pylon2", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_pylon2[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomePylon2[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_pylon2[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Pylon3", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_pylon3[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomePylon3[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_pylon3[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Pylon4", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_pylon4[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomePylon4[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_pylon4[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Pylon5", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_pylon5[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomePylon5[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_pylon5[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            gv_pylonIncome[PlayerGroupLoopCurrent()] = ((gv_incomePylon[PlayerGroupLoopCurrent()] * 16) + ((gv_incomePylon2[PlayerGroupLoopCurrent()] * 32) + ((gv_incomePylon3[PlayerGroupLoopCurrent()] * 64) + ((gv_incomePylon4[PlayerGroupLoopCurrent()] * 128) + (gv_incomePylon5[PlayerGroupLoopCurrent()] * 256)))));
            gv_totalIncome[PlayerGroupLoopCurrent()] = ((10 + gv_zergIncome[PlayerGroupLoopCurrent()]) + (gv_terranIncome[PlayerGroupLoopCurrent()] + (gv_protossIncome[PlayerGroupLoopCurrent()] + gv_pylonIncome[PlayerGroupLoopCurrent()])));
            libNtve_gf_SetDialogItemText(gv_labelIncome[PlayerGroupLoopCurrent()], IntToText(gv_totalIncome[PlayerGroupLoopCurrent()]), PlayerGroupAll());
            gv_totalIncome2[PlayerGroupLoopCurrent()] = IntToFixed(gv_totalIncome[PlayerGroupLoopCurrent()]);
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Pylonupgrading3_Init () {
    gt_Pylonupgrading3 = TriggerCreate("gt_Pylonupgrading3_Func");
    TriggerAddEventUnitAbility(gt_Pylonupgrading3, null, AbilityCommand("UpgradeToGreaterSpire322", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pylon upgrading4
//--------------------------------------------------------------------------------------------------
bool gt_Pylonupgrading4_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(PlayerGroupActive());
    while (!PlayerGroupLoopDone()) {
        if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            gv_incomePylon[PlayerGroupLoopCurrent()] = 0;
            gv_incomePylon2[PlayerGroupLoopCurrent()] = 0;
            gv_incomePylon3[PlayerGroupLoopCurrent()] = 0;
            gv_incomePylon4[PlayerGroupLoopCurrent()] = 0;
            gv_incomePylon5[PlayerGroupLoopCurrent()] = 0;
            UnitGroupLoopBegin(UnitGroup("Pylon", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_pylon1[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomePylon[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_pylon1[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Pylon2", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_pylon2[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomePylon2[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_pylon2[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Pylon3", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_pylon3[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomePylon3[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_pylon3[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Pylon4", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_pylon4[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomePylon4[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_pylon4[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(UnitGroup("Pylon5", PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            while (!UnitGroupLoopDone()) {
                UnitGroupAdd(gv_pylon5[PlayerGroupLoopCurrent()], UnitGroupLoopCurrent());
                gv_incomePylon5[PlayerGroupLoopCurrent()] = UnitGroupCount(gv_pylon5[PlayerGroupLoopCurrent()], c_unitCountAlive);
                UnitGroupLoopStep();
            }
            UnitGroupLoopEnd();
            gv_pylonIncome[PlayerGroupLoopCurrent()] = ((gv_incomePylon[PlayerGroupLoopCurrent()] * 16) + ((gv_incomePylon2[PlayerGroupLoopCurrent()] * 32) + ((gv_incomePylon3[PlayerGroupLoopCurrent()] * 64) + ((gv_incomePylon4[PlayerGroupLoopCurrent()] * 128) + (gv_incomePylon5[PlayerGroupLoopCurrent()] * 256)))));
            gv_totalIncome[PlayerGroupLoopCurrent()] = ((10 + gv_zergIncome[PlayerGroupLoopCurrent()]) + (gv_terranIncome[PlayerGroupLoopCurrent()] + (gv_protossIncome[PlayerGroupLoopCurrent()] + gv_pylonIncome[PlayerGroupLoopCurrent()])));
            libNtve_gf_SetDialogItemText(gv_labelIncome[PlayerGroupLoopCurrent()], IntToText(gv_totalIncome[PlayerGroupLoopCurrent()]), PlayerGroupAll());
            gv_totalIncome2[PlayerGroupLoopCurrent()] = IntToFixed(gv_totalIncome[PlayerGroupLoopCurrent()]);
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Pylonupgrading4_Init () {
    gt_Pylonupgrading4 = TriggerCreate("gt_Pylonupgrading4_Func");
    TriggerAddEventUnitAbility(gt_Pylonupgrading4, null, AbilityCommand("UpgradeToGreaterSpire3222", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Income
//--------------------------------------------------------------------------------------------------
bool gt_Income_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_timer2 == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(PlayerGroupActive());
    while (!PlayerGroupLoopDone()) {
        if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropMinerals, c_playerPropOperAdd, gv_totalIncome[PlayerGroupLoopCurrent()]);
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Income_Init () {
    gt_Income = TriggerCreate("gt_Income_Func");
    TriggerEnable(gt_Income, false);
    TriggerAddEventTimePeriodic(gt_Income, 1.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Income Update
//--------------------------------------------------------------------------------------------------
bool gt_IncomeUpdate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnitProgressUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(PlayerGroupActive());
    while (!PlayerGroupLoopDone()) {
        if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            gv_totalIncome[PlayerGroupLoopCurrent()] = ((10 + gv_zergIncome[PlayerGroupLoopCurrent()]) + (gv_terranIncome[PlayerGroupLoopCurrent()] + (gv_protossIncome[PlayerGroupLoopCurrent()] + gv_pylonIncome[PlayerGroupLoopCurrent()])));
            libNtve_gf_SetDialogItemText(gv_labelIncome[PlayerGroupLoopCurrent()], IntToText(gv_totalIncome[PlayerGroupLoopCurrent()]), PlayerGroupAll());
            gv_totalIncome2[PlayerGroupLoopCurrent()] = IntToFixed(gv_totalIncome[PlayerGroupLoopCurrent()]);
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IncomeUpdate_Init () {
    gt_IncomeUpdate = TriggerCreate("gt_IncomeUpdate_Func");
    TriggerAddEventUnitConstructProgress(gt_IncomeUpdate, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Income Update 2
//--------------------------------------------------------------------------------------------------
bool gt_IncomeUpdate2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(PlayerGroupActive());
    while (!PlayerGroupLoopDone()) {
        if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            gv_totalIncome[PlayerGroupLoopCurrent()] = ((10 + gv_zergIncome[PlayerGroupLoopCurrent()]) + (gv_terranIncome[PlayerGroupLoopCurrent()] + (gv_protossIncome[PlayerGroupLoopCurrent()] + gv_pylonIncome[PlayerGroupLoopCurrent()])));
            libNtve_gf_SetDialogItemText(gv_labelIncome[PlayerGroupLoopCurrent()], IntToText(gv_totalIncome[PlayerGroupLoopCurrent()]), PlayerGroupAll());
            gv_totalIncome2[PlayerGroupLoopCurrent()] = IntToFixed(gv_totalIncome[PlayerGroupLoopCurrent()]);
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IncomeUpdate2_Init () {
    gt_IncomeUpdate2 = TriggerCreate("gt_IncomeUpdate2_Func");
    TriggerAddEventUnitDied(gt_IncomeUpdate2, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Income Map init
//--------------------------------------------------------------------------------------------------
bool gt_IncomeMapinit_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(PlayerGroupActive());
    while (!PlayerGroupLoopDone()) {
        if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            gv_totalIncome[PlayerGroupLoopCurrent()] = ((10 + gv_zergIncome[PlayerGroupLoopCurrent()]) + (gv_terranIncome[PlayerGroupLoopCurrent()] + (gv_protossIncome[PlayerGroupLoopCurrent()] + gv_pylonIncome[PlayerGroupLoopCurrent()])));
            libNtve_gf_SetDialogItemText(gv_labelIncome[PlayerGroupLoopCurrent()], IntToText(gv_totalIncome[PlayerGroupLoopCurrent()]), PlayerGroupAll());
            gv_totalIncome2[PlayerGroupLoopCurrent()] = IntToFixed(gv_totalIncome[PlayerGroupLoopCurrent()]);
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IncomeMapinit_Init () {
    gt_IncomeMapinit = TriggerCreate("gt_IncomeMapinit_Func");
    TriggerAddEventMapInit(gt_IncomeMapinit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team1 Income
//--------------------------------------------------------------------------------------------------
bool gt_Team1Income_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_totalIncomeTeam1 = 0;
    PlayerGroupLoopBegin(gv_team1);
    while (!PlayerGroupLoopDone()) {
        gv_totalIncomeTeam1 = (gv_totalIncomeTeam1 + gv_totalIncome[PlayerGroupLoopCurrent()]);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    libNtve_gf_SetDialogItemText(gv_labelTeam1Income, IntToText(gv_totalIncomeTeam1), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Team1Income_Init () {
    gt_Team1Income = TriggerCreate("gt_Team1Income_Func");
    TriggerAddEventTimePeriodic(gt_Team1Income, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team2 Income
//--------------------------------------------------------------------------------------------------
bool gt_Team2Income_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_totalIncomeTeam2 = 0;
    PlayerGroupLoopBegin(gv_team2);
    while (!PlayerGroupLoopDone()) {
        gv_totalIncomeTeam2 = (gv_totalIncomeTeam2 + gv_totalIncome[PlayerGroupLoopCurrent()]);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    libNtve_gf_SetDialogItemText(gv_labelTeam2Income, IntToText(gv_totalIncomeTeam2), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Team2Income_Init () {
    gt_Team2Income = TriggerCreate("gt_Team2Income_Func");
    TriggerAddEventTimePeriodic(gt_Team2Income, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team1 Kills
//--------------------------------------------------------------------------------------------------
bool gt_Team1Kills_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team1killscount;

    // Variable Initialization
    lv_team1killscount = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_team1killscount = 0;
    PlayerGroupLoopBegin(gv_team1);
    while (!PlayerGroupLoopDone()) {
        lv_team1killscount = (lv_team1killscount + gv_playerskills[PlayerGroupLoopCurrent()]);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    libNtve_gf_SetDialogItemText(gv_labelTeam1kills, IntToText(lv_team1killscount), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Team1Kills_Init () {
    gt_Team1Kills = TriggerCreate("gt_Team1Kills_Func");
    TriggerAddEventTimePeriodic(gt_Team1Kills, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team2 Kills
//--------------------------------------------------------------------------------------------------
bool gt_Team2Kills_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team2killscount;

    // Variable Initialization
    lv_team2killscount = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_team2killscount = 0;
    PlayerGroupLoopBegin(gv_team2);
    while (!PlayerGroupLoopDone()) {
        lv_team2killscount = (lv_team2killscount + gv_playerskills[PlayerGroupLoopCurrent()]);
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    libNtve_gf_SetDialogItemText(gv_labelTeam2kills, IntToText(lv_team2killscount), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Team2Kills_Init () {
    gt_Team2Kills = TriggerCreate("gt_Team2Kills_Func");
    TriggerAddEventTimePeriodic(gt_Team2Kills, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Level
//--------------------------------------------------------------------------------------------------
bool gt_Level_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(PlayerGroupActive());
    while (!PlayerGroupLoopDone()) {
        UnitGroupLoopBegin(UnitGroup(null, PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter((1 << c_targetFilterWorker), 0, 0, 0), 0));
        while (!UnitGroupLoopDone()) {
            if ((UnitXPTotal(UnitGroupLoopCurrent()) < gv_totalIncome2[PlayerGroupLoopCurrent()])) {
                lib1_gf_AddExperienceToUnit(1, UnitGroupLoopCurrent());
            }
            else {
            }
            UnitGroupLoopStep();
        }
        UnitGroupLoopEnd();
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Level_Init () {
    gt_Level = TriggerCreate("gt_Level_Func");
    TriggerEnable(gt_Level, false);
    TriggerAddEventTimePeriodic(gt_Level, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game Command
//--------------------------------------------------------------------------------------------------
bool gt_GameCommand_Func(bool testConds, bool runActions) {
    int gv_allPlayer = gv_smiley1 + gv_smiley2;
    int init_i = 0;
    // Actions
    if (!runActions) {
        return true;
    }

    if(StringEqual(EventChatMessage(false), "-draw", false) && gv_seconds >= 2400) {
        // Draw Proposal
        if(gv_drawTimer > 0) {
            if(gv_drawTimer > 300) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/D070E179"));
            }
            else {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/D070E180") + FormatDuration(gv_drawTimer));
            }
            return true;
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/D070E174"));
        while (init_i <= 10) {
            gv_drawVote[init_i] = 0;
            init_i = init_i + 1;
        }
        if(gv_allPlayer <= 2) {
            gv_drawRequire = gv_allPlayer;
        }
        else {
            if(gv_allPlayer == 3) {
                gv_drawRequire = 2;
            }
            else {
                if(gv_allPlayer == 4) {
                    gv_drawRequire = 3;
                }
                else {
                    if(gv_allPlayer == 5) {
                        gv_drawRequire = 4;
                    }
                    else {
                        if(gv_allPlayer == 6) {
                            gv_drawRequire = 4;
                        }
                        else {
                            if(gv_allPlayer == 7) {
                                gv_drawRequire = 5;
                            }
                            else {
                                if(gv_allPlayer == 8) {
                                    gv_drawRequire = 6;
                                }
                            }
                        }
                    }
                }
            }
        }
        gv_drawVote[EventPlayer()] = 1;
        gv_acceptPlayer = 1;
        gv_drawTimer = 316;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/D070E175") + StringToText(" ") + PlayerName(EventPlayer()) + StringToText(" ") + StringExternal("Param/Value/D070E176") + StringToText(": (") + IntToText(gv_acceptPlayer) + StringToText("/") + IntToText(gv_drawRequire) + StringToText(")"));
    }
    else {
        if(StringEqual(EventChatMessage(false), "-y", false) && gv_drawTimer > 300) {
            // Draw Accept
            if(gv_drawVote[EventPlayer()] == 0) {
                gv_drawVote[EventPlayer()] = 1;
                gv_acceptPlayer = gv_acceptPlayer + 1;
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/D070E175") + StringToText(" ") + PlayerName(EventPlayer()) + StringToText(" ") + StringExternal("Param/Value/D070E176") + StringToText(": (") + IntToText(gv_acceptPlayer) + StringToText("/") + IntToText(gv_drawRequire) + StringToText(")"));
            }
        }
        else {
            if(StringEqual(EventChatMessage(false), "-n", false) && gv_drawTimer > 300) {
                // Draw Reject
                if(gv_drawVote[EventPlayer()] == 0) {
                    gv_drawVote[EventPlayer()] = 2;
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/D070E175") + StringToText(" ") + PlayerName(EventPlayer()) + StringToText(" ") + StringExternal("Param/Value/D070E177"));
                }
            }
            else {
                if(StringEqual(EventChatMessage(false), "-record", false)) {
                    // Display record
                    PlayerGroupLoopBegin(gv_team12);
                    while(!PlayerGroupLoopDone()) {
                        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, PlayerName(PlayerGroupLoopCurrent()) + StringToText(": ") + IntToText(gv_wins[PlayerGroupLoopCurrent()]) + StringToText(" Wins | ") + IntToText(gv_loss[PlayerGroupLoopCurrent()]) + StringToText(" Loss"));
                        PlayerGroupLoopStep();
                    }
                    PlayerGroupLoopEnd();
                    PlayerGroupLoopBegin(gv_team22);
                    while(!PlayerGroupLoopDone()) {
                        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, PlayerName(PlayerGroupLoopCurrent()) + StringToText(" ") + IntToText(gv_wins[PlayerGroupLoopCurrent()]) + StringToText(" Wins | ") + IntToText(gv_loss[PlayerGroupLoopCurrent()]) + StringToText(" Loss"));
                        PlayerGroupLoopStep();
                    }
                    PlayerGroupLoopEnd();
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GameCommand_Init() {
    gt_GameCommand = TriggerCreate("gt_GameCommand_Func");
    TriggerAddEventChatMessage(gt_GameCommand, c_playerAny, "-", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Leave Punish
//--------------------------------------------------------------------------------------------------
bool gt_PlayerLeavePunish_Func(bool testConds, bool runActions) {
    int init_i = 0;
    // Actions
    if (!runActions) {
        return true;
    }
    
    if(gv_gameover) {
        return true;
    }
    BankValueSetFromInt(gv_banks[EventPlayer()], "record", "loss", gv_loss[EventPlayer()] + 1);
    BankSave(gv_banks[EventPlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerLeavePunish_Init() {
    gt_PlayerLeavePunish = TriggerCreate("gt_PlayerLeavePunish_Func");
    TriggerAddEventPlayerLeft(gt_PlayerLeavePunish, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Leave Punish
//--------------------------------------------------------------------------------------------------
bool gt_Nuke_Func(bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }
    
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, PlayerName(UnitGetOwner(EventUnit())) + StringToText(" ") + StringExternal("Param/Value/D070E182"));
    libNtve_gf_SetDialogItemText(gv_nukeIndicator[UnitGetOwner(EventUnit())], StringToText(""), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Nuke_Init() {
    gt_Nuke = TriggerCreate("gt_Nuke_Func");
    TriggerAddEventUnitAbility(gt_Nuke, null, AbilityCommand("Blast", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Maraudor_Init();
    gt_Marine_Init();
    gt_pylon_Init();
    gt_cannon_Init();
    gt_Infested1_Init();
    gt_Infested2_Init();
    gt_Sentry_Init();
    gt_VoidRay_Init();
    gt_Raven_Init();
    gt_Banshee_Init();
    gt_Ghostclaok_Init();
    gt_stalker_Init();
    gt_hellion_Init();
    gt_Carrier_Init();
    gt_Cannon60_Init();
    gt_Cannon90_Init();
    gt_UnitQueue_Init();
    gt_UnitQueue2_Init();
    gt_UnitQueue3_Init();
    gt_AI_Init();
    gt_Region1stuck_Init();
    gt_Region2stuck_Init();
    gt_Region3stuck_Init();
    gt_Region4stuck_Init();
    gt_Region5_Init();
    gt_Region6_Init();
    gt_Region7_Init();
    gt_Region8_Init();
    gt_Team1Teleport_Init();
    gt_Team2Teleport_Init();
    gt_AntiCagingTeam1_Init();
    gt_AntiCagingTeam2_Init();
    gt_Team1CompBottom2_Init();
    gt_Team1CompTop_Init();
    gt_Team1CompBottom2Stuck_Init();
    gt_Team1CompTopStuck_Init();
    gt_Team2CompBottom2_Init();
    gt_Team2CompTop_Init();
    gt_Team2CompBottom2Stuck_Init();
    gt_Team2CompTopStuck_Init();
    gt_compscvbuild_Init();
    gt_Kills_Init();
    gt_ShowHideLBButton_Init();
    gt_LeaderboardIntialization_Init();
    gt_LeaderboardIntialization2_Init();
    gt_TimerUpdate_Init();
    gt_TimerSet_Init();
    gt_TimerUpdate2_Init();
    gt_TimerSet2_Init();
    gt_button_Init();
    gt_FogofWar_Init();
    gt_MapInitialization_Init();
    gt_Runtriggers_Init();
    gt_SCVcreate2_Init();
    gt_Food60_Init();
    gt_Food90_Init();
    gt_SCVcommandable_Init();
    gt_Time_Init();
    gt_TimeUpdate_Init();
    gt_Team1Win_Init();
    gt_Team2Win_Init();
    gt_EndGame2_Init();
    gt_EndGame3_Init();
    gt_Leave_Init();
    gt_Leave2_Init();
    gt_LeaverSupply_Init();
    gt_LeaverSupply2_Init();
    gt_LeaverSupply3_Init();
    gt_LeaverSupply4_Init();
    gt_Leaverunits_Init();
    gt_Zerglingbountyvariable_Init();
    gt_AddingtoIncomeTerran_Init();
    gt_AddingtoIncomeZerg_Init();
    gt_AddingtoIncomeProtoss_Init();
    gt_AddingtoIncomeTerran2_Init();
    gt_AddingtoIncomeZerg2_Init();
    gt_AddingtoIncomeProtoss2_Init();
    gt_AddingtoIncomeleaver_Init();
    gt_AddingPylon_Init();
    gt_AddingPylon2_Init();
    gt_Pylonupgrading1_Init();
    gt_Pylonupgrading2_Init();
    gt_Pylonupgrading3_Init();
    gt_Pylonupgrading4_Init();
    gt_Income_Init();
    gt_IncomeUpdate_Init();
    gt_IncomeUpdate2_Init();
    gt_IncomeMapinit_Init();
    gt_Team1Income_Init();
    gt_Team2Income_Init();
    gt_Team1Kills_Init();
    gt_Team2Kills_Init();
    gt_GameCommand_Init();
    gt_PlayerLeavePunish_Init();
    gt_Nuke_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
